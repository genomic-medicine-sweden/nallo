{
    "$schema": "http://json-schema.org/draft-07/schema",
    "$id": "https://raw.githubusercontent.com/genomic-medicine-sweden/nallo/master/nextflow_schema.json",
    "title": "genomic-medicine-sweden/nallo pipeline parameters",
    "description": "Long-read variant calling pipeline",
    "type": "object",
    "definitions": {
        "workflow_skip_options": {
            "title": "Workflow skip options",
            "type": "object",
            "description": "Allows skipping certain parts of the pipeline",
            "default": "",
            "properties": {
                "skip_qc": {
                    "type": "boolean",
                    "fa_icon": "fas fa-fast-forward",
                    "description": "Skip QC of reads",
                    "default": false
                },
                "skip_short_variant_calling": {
                    "type": "boolean",
                    "description": "Skip short variant calling",
                    "fa_icon": "fas fa-fast-forward",
                    "default": false
                },
                "skip_assembly_wf": {
                    "type": "boolean",
                    "description": "Skip genome assembly and assembly variant calling",
                    "fa_icon": "fas fa-fast-forward",
                    "default": false
                },
                "skip_mapping_wf": {
                    "type": "boolean",
                    "description": "Skip read mapping (alignment)",
                    "fa_icon": "fas fa-fast-forward",
                    "default": false
                },
                "skip_methylation_wf": {
                    "type": "boolean",
                    "description": "Skip generation of methylation pileups",
                    "fa_icon": "fas fa-fast-forward",
                    "default": false
                },
                "skip_repeat_calling": {
                    "type": "boolean",
                    "description": "Skip tandem repeat calling",
                    "fa_icon": "fas fa-fast-forward",
                    "default": false
                },
                "skip_repeat_annotation": {
                    "type": "boolean",
                    "description": "Skip tandem repeat annotation",
                    "fa_icon": "fas fa-fast-forward",
                    "default": false
                },
                "skip_phasing_wf": {
                    "type": "boolean",
                    "fa_icon": "fas fa-fast-forward",
                    "description": "Skip phasing of variants and haplotagging of reads",
                    "default": false
                },
                "skip_snv_annotation": {
                    "type": "boolean",
                    "description": "Skip short variant annotation",
                    "default": false
                },
                "skip_cnv_calling": {
                    "type": "boolean",
                    "description": "Skip CNV calling",
                    "default": false
                },
                "skip_call_paralogs": {
                    "type": "boolean",
                    "description": "Skip the calling of specific paralogous genes",
                    "default": false
                },
                "skip_rank_variants": {
                    "type": "boolean",
                    "description": "Skip ranking of short variants",
                    "default": false
                }
            },
            "fa_icon": "fas fa-american-sign-language-interpreting"
        },
        "input_output_options": {
            "title": "Input/output options",
            "type": "object",
            "fa_icon": "fas fa-terminal",
            "description": "Define where the pipeline should find input data and save output data.",
            "required": ["input", "outdir"],
            "properties": {
                "input": {
                    "type": "string",
                    "format": "file-path",
                    "exists": true,
                    "schema": "assets/schema_input.json",
                    "mimetype": "text/csv",
                    "pattern": "^\\S+\\.csv$",
                    "description": "Path to comma-separated file containing information about the samples in the experiment.",
                    "help_text": "You will need to create a design file with information about the samples in your experiment before running the pipeline. Use this parameter to specify its location. It has to be a comma-separated file with 3 columns, and a header row.",
                    "fa_icon": "fas fa-file-csv"
                },
                "outdir": {
                    "type": "string",
                    "format": "directory-path",
                    "description": "The output directory where the results will be saved. You have to use absolute paths to storage on Cloud infrastructure.",
                    "fa_icon": "fas fa-folder-open"
                },
                "email": {
                    "type": "string",
                    "description": "Email address for completion summary.",
                    "fa_icon": "fas fa-envelope",
                    "help_text": "Set this parameter to your e-mail address to get a summary e-mail with details of the run sent to you when the workflow exits. If set in your user config file (`~/.nextflow/config`) then you don't need to specify this on the command line for every run.",
                    "pattern": "^([a-zA-Z0-9_\\-\\.]+)@([a-zA-Z0-9_\\-\\.]+)\\.([a-zA-Z]{2,5})$"
                },
                "multiqc_title": {
                    "type": "string",
                    "description": "MultiQC report title. Printed as page header, used for filename if not otherwise specified.",
                    "fa_icon": "fas fa-file-signature"
                }
            }
        },
        "reference_genome_options": {
            "title": "Reference genome options",
            "type": "object",
            "fa_icon": "fas fa-dna",
            "description": "Reference genome related files and options required for the workflow.",
            "properties": {
                "fasta": {
                    "type": "string",
                    "description": "Reference genome",
                    "pattern": "^.*\\.(fasta|fa|fna)(\\.gz)?$",
                    "format": "file-path",
                    "exists": true
                },
                "genome": {
                    "type": "string",
                    "description": "Name of iGenomes reference.",
                    "help_text": "If using a reference genome configured in the pipeline using iGenomes, use this parameter to give the ID for the reference. This is then used to build the full paths for all required reference genome files e.g. `--genome GRCh38`. \n\nSee the [nf-core website docs](https://nf-co.re/usage/reference_genomes) for more details."
                },
                "igenomes_ignore": {
                    "type": "boolean",
                    "description": "Do not load the iGenomes reference config.",
                    "fa_icon": "fas fa-ban",
                    "hidden": true,
                    "help_text": "Do not load `igenomes.config` when running the pipeline. You may choose this option if you observe clashes between custom parameters and those supplied in `igenomes.config`.",
                    "default": true
                }
            }
        },
        "institutional_config_options": {
            "title": "Institutional config options",
            "type": "object",
            "fa_icon": "fas fa-university",
            "description": "Parameters used to describe centralised config profiles. These should not be edited.",
            "help_text": "The centralised nf-core configuration profiles use a handful of pipeline parameters to describe themselves. This information is then printed to the Nextflow log when you run a pipeline. You should not need to change these values when you run a pipeline.",
            "properties": {
                "custom_config_version": {
                    "type": "string",
                    "description": "Git commit id for Institutional configs.",
                    "default": "master",
                    "hidden": true,
                    "fa_icon": "fas fa-users-cog"
                },
                "custom_config_base": {
                    "type": "string",
                    "description": "Base directory for Institutional configs.",
                    "default": "https://raw.githubusercontent.com/nf-core/configs/master",
                    "hidden": true,
                    "help_text": "If you're running offline, Nextflow will not be able to fetch the institutional config files from the internet. If you don't need them, then this is not a problem. If you do need them, you should download the files from the repo and tell Nextflow where to find them with this parameter.",
                    "fa_icon": "fas fa-users-cog"
                },
                "config_profile_name": {
                    "type": "string",
                    "description": "Institutional config name.",
                    "hidden": true,
                    "fa_icon": "fas fa-users-cog"
                },
                "config_profile_description": {
                    "type": "string",
                    "description": "Institutional config description.",
                    "hidden": true,
                    "fa_icon": "fas fa-users-cog"
                },
                "config_profile_contact": {
                    "type": "string",
                    "description": "Institutional config contact information.",
                    "hidden": true,
                    "fa_icon": "fas fa-users-cog"
                },
                "config_profile_url": {
                    "type": "string",
                    "description": "Institutional config URL link.",
                    "hidden": true,
                    "fa_icon": "fas fa-users-cog"
                }
            }
        },
        "max_job_request_options": {
            "title": "Max job request options",
            "type": "object",
            "fa_icon": "fab fa-acquisitions-incorporated",
            "description": "Set the top limit for requested resources for any single job.",
            "help_text": "If you are running on a smaller system, a pipeline step requesting more resources than are available may cause the Nextflow to stop the run with an error. These options allow you to cap the maximum resources requested by any single job so that the pipeline will run on your system.\n\nNote that you can not _increase_ the resources requested by any job using these options. For that you will need your own configuration file. See [the nf-core website](https://nf-co.re/usage/configuration) for details.",
            "properties": {
                "max_cpus": {
                    "type": "integer",
                    "description": "Maximum number of CPUs that can be requested for any single job.",
                    "default": 16,
                    "fa_icon": "fas fa-microchip",
                    "hidden": true,
                    "help_text": "Use to set an upper-limit for the CPU requirement for each process. Should be an integer e.g. `--max_cpus 1`"
                },
                "max_memory": {
                    "type": "string",
                    "description": "Maximum amount of memory that can be requested for any single job.",
                    "default": "128.GB",
                    "fa_icon": "fas fa-memory",
                    "pattern": "^\\d+(\\.\\d+)?\\.?\\s*(K|M|G|T)?B$",
                    "hidden": true,
                    "help_text": "Use to set an upper-limit for the memory requirement for each process. Should be a string in the format integer-unit e.g. `--max_memory '8.GB'`"
                },
                "max_time": {
                    "type": "string",
                    "description": "Maximum amount of time that can be requested for any single job.",
                    "default": "240.h",
                    "fa_icon": "far fa-clock",
                    "pattern": "^(\\d+\\.?\\s*(s|m|h|d|day)\\s*)+$",
                    "hidden": true,
                    "help_text": "Use to set an upper-limit for the time requirement for each process. Should be a string in the format integer-unit e.g. `--max_time '2.h'`"
                }
            }
        },
        "generic_options": {
            "title": "Generic options",
            "type": "object",
            "fa_icon": "fas fa-file-import",
            "description": "Less common options for the pipeline, typically set in a config file.",
            "help_text": "These options are common to all nf-core pipelines and allow you to customise some of the core preferences for how the pipeline runs.\n\nTypically these options would be set in a Nextflow config file loaded for all pipeline runs, such as `~/.nextflow/config`.",
            "properties": {
                "help": {
                    "type": "boolean",
                    "description": "Display help text.",
                    "fa_icon": "fas fa-question-circle",
                    "hidden": true
                },
                "version": {
                    "type": "boolean",
                    "description": "Display version and exit.",
                    "fa_icon": "fas fa-question-circle",
                    "hidden": true
                },
                "publish_dir_mode": {
                    "type": "string",
                    "default": "copy",
                    "description": "Method used to save pipeline results to output directory.",
                    "help_text": "The Nextflow `publishDir` option specifies which intermediate files should be saved to the output directory. This option tells the pipeline what method should be used to move these files. See [Nextflow docs](https://www.nextflow.io/docs/latest/process.html#publishdir) for details.",
                    "fa_icon": "fas fa-copy",
                    "enum": ["symlink", "rellink", "link", "copy", "copyNoFollow", "move"],
                    "hidden": true
                },
                "email_on_fail": {
                    "type": "string",
                    "description": "Email address for completion summary, only when pipeline fails.",
                    "fa_icon": "fas fa-exclamation-triangle",
                    "pattern": "^([a-zA-Z0-9_\\-\\.]+)@([a-zA-Z0-9_\\-\\.]+)\\.([a-zA-Z]{2,5})$",
                    "help_text": "An email address to send a summary email to when the pipeline is completed - ONLY sent if the pipeline does not exit successfully.",
                    "hidden": true
                },
                "plaintext_email": {
                    "type": "boolean",
                    "description": "Send plain-text email instead of HTML.",
                    "fa_icon": "fas fa-remove-format",
                    "hidden": true
                },
                "max_multiqc_email_size": {
                    "type": "string",
                    "description": "File size limit when attaching MultiQC reports to summary emails.",
                    "pattern": "^\\d+(\\.\\d+)?\\.?\\s*(K|M|G|T)?B$",
                    "default": "25.MB",
                    "fa_icon": "fas fa-file-upload",
                    "hidden": true
                },
                "monochrome_logs": {
                    "type": "boolean",
                    "description": "Do not use coloured log outputs.",
                    "fa_icon": "fas fa-palette",
                    "hidden": true
                },
                "hook_url": {
                    "type": "string",
                    "description": "Incoming hook URL for messaging service",
                    "fa_icon": "fas fa-people-group",
                    "help_text": "Incoming hook URL for messaging service. Currently, MS Teams and Slack are supported.",
                    "hidden": true
                },
                "multiqc_config": {
                    "type": "string",
                    "format": "file-path",
                    "description": "Custom config file to supply to MultiQC.",
                    "fa_icon": "fas fa-cog",
                    "hidden": true
                },
                "multiqc_logo": {
                    "type": "string",
                    "description": "Custom logo file to supply to MultiQC. File name must also be set in the MultiQC config file",
                    "fa_icon": "fas fa-image",
                    "hidden": true
                },
                "multiqc_methods_description": {
                    "type": "string",
                    "description": "Custom MultiQC yaml file containing HTML including a methods description.",
                    "fa_icon": "fas fa-cog"
                },
                "validate_params": {
                    "type": "boolean",
                    "description": "Boolean whether to validate parameters against the schema at runtime",
                    "default": true,
                    "fa_icon": "fas fa-check-square",
                    "hidden": true
                },
                "validationShowHiddenParams": {
                    "type": "boolean",
                    "fa_icon": "far fa-eye-slash",
                    "description": "Show all params when using `--help`",
                    "hidden": true,
                    "help_text": "By default, parameters set as _hidden_ in the schema are not shown on the command line when a user runs with `--help`. Specifying this option will tell the pipeline to show all parameters."
                },
                "validationSkipDuplicateCheck": {
                    "type": "boolean",
                    "hidden": true,
                    "description": "nf-validation related parameter"
                },
                "validationS3PathCheck": {
                    "type": "boolean",
                    "hidden": true,
                    "description": "Boolean whether to validate validate AWS S3 paths"
                },
                "monochromeLogs": {
                    "type": "boolean",
                    "hidden": true,
                    "description": "Boolean whether to color nf-validation logs"
                }
            }
        },
        "workflow_options": {
            "title": "Workflow options",
            "type": "object",
            "description": "Workflow options specific to genomic-medicine-sweden/nallo",
            "default": "",
            "properties": {
                "preset": {
                    "type": "string",
                    "default": "revio",
                    "description": "Enable or disable certain parts of the pipeline by default, depending on data type (`revio`, `pacbio`, `ONT_R10`)",
                    "enum": ["revio", "pacbio", "ONT_R10"]
                },
                "variant_caller": {
                    "type": "string",
                    "default": "deepvariant",
                    "description": "Which short variant software to use (`deepvariant`)",
                    "enum": ["deepvariant"]
                },
                "sv_caller": {
                    "type": "string",
                    "default": "severus",
                    "description": "Which structural variant caller to use (`severus`, `sniffles`)",
                    "enum": ["severus", "sniffles"]
                },
                "phaser": {
                    "type": "string",
                    "default": "whatshap",
                    "description": "Which phasing software to use (`whatshap`, `hiphase_snv`, `hiphase_sv`)",
                    "enum": ["whatshap", "hiphase_snv", "hiphase_sv"]
                },
                "hifiasm_mode": {
                    "type": "string",
                    "description": "Run hifiasm in hifi-only or hifi-trio mode (`hifi-only`, `trio-binning`)",
                    "enum": ["hifi-only", "trio-binning"],
                    "default": "hifi-only"
                },
                "parallel_alignments": {
                    "type": "integer",
                    "minimum": 1,
                    "default": 1,
                    "description": "If parallel_alignments is bigger than 1, input files will be split and aligned in parallel to reduce processing time."
                },
                "parallel_snv": {
                    "type": "integer",
                    "default": 13,
                    "description": "If parallel_snv is bigger than 1, short variant calling will be done in parallel to reduce processing time.",
                    "minimum": 1
                },
                "vep_cache_version": {
                    "type": "integer",
                    "default": 110,
                    "description": "VEP cache version"
                },
                "vep_plugin_files": {
                    "type": "string",
                    "mimetype": "text/csv",
                    "description": "A csv file with vep_plugins as header, and then paths to vep plugin files. Paths to pLI_values.txt and LoFtool_scores.txt are required.",
                    "schema": "assets/vep_plugin_files_schema.json"
                },
                "deepvariant_model_type": {
                    "type": "string",
                    "default": "PACBIO",
                    "description": "Sets the model type used for DeepVariant. This is set automatically using `--preset` by default.",
                    "hidden": true,
                    "enum": ["PACBIO", "ONT_R104"]
                },
                "minimap2_read_mapping_preset": {
                    "type": "string",
                    "description": "Sets the minimap2-preset (-x) for read alignment. This is set automatically using the pipeline `--preset` by default.",
                    "hidden": true,
                    "enum": ["map-hifi", "map-ont", "lr:hq", "lr:hqae"]
                },
                "extra_modkit_options": {
                    "type": "string",
                    "hidden": true,
                    "description": "Extra options to modkit, used for test profile."
                },
                "extra_vep_options": {
                    "type": "string",
                    "hidden": true,
                    "description": "Extra options to VEP, used for test profile."
                },
                "extra_paraphase_options": {
                    "type": "string",
                    "hidden": true,
                    "description": "Extra options to Paraphase, used for test profile."
                },
                "extra_hifiasm_options": {
                    "type": "string",
                    "hidden": true,
                    "description": "Extra options to hifiasm, used for test profile."
                }
            },
            "required": ["preset"]
        },
        "file_inputs": {
            "title": "File inputs",
            "type": "object",
            "description": "The different files that are required. Some are only required by certain workflows, see the usage documentation.",
            "default": "",
            "fa_icon": "fas fa-copy",
            "properties": {
                "cadd_prescored": {
                    "type": "string",
                    "exists": true,
                    "format": "directory-path",
                    "fa_icon": "fas fa-file",
                    "description": "Path to a directory containing prescored indels for CADD.",
                    "help_text": "This folder contains the compressed files and indexes that would otherwise be in data/prescored folder as described in https://github.com/kircherlab/CADD-scripts/#manual-installation."
                },
                "cadd_resources": {
                    "type": "string",
                    "exists": true,
                    "format": "directory-path",
                    "fa_icon": "fas fa-file",
                    "description": "Path to a directory containing CADD annotations.",
                    "help_text": "This folder contains the uncompressed files that would otherwise be in data/annotation folder as described in https://github.com/kircherlab/CADD-scripts/#manual-installation."
                },
                "par_regions": {
                    "type": "string",
                    "description": "Provide a bed file of chrX and chrY PAR regions for dipcall and DeepVariant",
                    "format": "file-path",
                    "exists": true
                },
                "tandem_repeats": {
                    "type": "string",
                    "format": "file-path",
                    "description": "A tandem repeat BED file for sniffles",
                    "pattern": "^\\S+\\.bed$",
                    "exists": true
                },
                "trgt_repeats": {
                    "type": "string",
                    "description": "A BED file with repeats to be genotyped with TRGT",
                    "format": "file-path",
                    "exists": true
                },
                "snp_db": {
                    "type": "string",
                    "pattern": "^\\S+\\.csv$",
                    "format": "file-path",
                    "mimetype": "text/csv",
                    "schema": "/assets/schema_snpdb.json",
                    "description": "A csv file with echtvar databases to annotate SNVs with",
                    "exists": true
                },
                "variant_catalog": {
                    "type": "string",
                    "description": "A variant catalog json-file for stranger",
                    "format": "file-path",
                    "exists": true
                },
                "variant_consequences_snv": {
                    "type": "string",
                    "description": "File containing list of SO terms listed in the order of severity from most severe to lease severe for annotating genomic SNVs. For more information check https://ensembl.org/info/genome/variation/prediction/predicted_data.html",
                    "fa_icon": "fas fa-file-csv"
                },
                "vep_cache": {
                    "type": "string",
                    "description": "A path to the VEP cache location",
                    "format": "path",
                    "exists": true
                },
                "bed": {
                    "type": "string",
                    "pattern": "^\\S+\\.bed$",
                    "format": "file-path",
                    "description": "A BED file with regions of interest, used to limit short variant calling.",
                    "exists": true
                },
                "hificnv_xy": {
                    "type": "string",
                    "format": "file-path",
                    "description": "A BED file containing expected copy number regions for XY samples.",
                    "exists": true
                },
                "hificnv_xx": {
                    "type": "string",
                    "format": "file-path",
                    "description": "A BED file containing expected copy number regions for XX samples.",
                    "exists": true
                },
                "hificnv_exclude": {
                    "type": "string",
                    "format": "file-path",
                    "description": "A BED file specifying regions to exclude with HiFiCNV, such as centromeres.",
                    "exists": true
                },
                "reduced_penetrance": {
                    "type": "string",
                    "exists": true,
                    "format": "path",
                    "fa_icon": "fas fa-file-csv",
                    "description": "A file with gene ids that have reduced penetrance. For use with genmod."
                },
                "score_config_snv": {
                    "type": "string",
                    "exists": true,
                    "format": "path",
                    "fa_icon": "fas fa-file",
                    "description": "A SNV rank model config file for genmod."
                },
                "somalier_sites": {
                    "type": "string",
                    "pattern": "^\\S+\\.vcf(\\.gz)?$",
                    "description": "A VCF of known polymorphic sites for somalier",
                    "format": "file-path",
                    "exists": true
                },
                "validationFailUnrecognisedParams": {
                    "type": "boolean",
                    "fa_icon": "far fa-check-circle",
                    "description": "Validation of parameters fails when an unrecognised parameter is found.",
                    "hidden": true,
                    "help_text": "By default, when an unrecognised parameter is found, it returns a warning."
                },
                "validationLenientMode": {
                    "type": "boolean",
                    "fa_icon": "far fa-check-circle",
                    "description": "Validation of parameters in lenient more.",
                    "hidden": true,
                    "help_text": "Allows string values that are parseable as numbers or booleans. For further information see [JSONSchema docs](https://github.com/everit-org/json-schema#lenient-mode)."
                },
                "pipelines_testdata_base_path": {
                    "type": "string",
                    "fa_icon": "far fa-check-circle",
                    "description": "Base URL or local path to location of pipeline test dataset files",
                    "default": "https://raw.githubusercontent.com/genomic-medicine-sweden/test-datasets/1f4e062926fc10f70a38e917e5771edb333e89bf/",
                    "hidden": true
                }
            }
        }
    },
    "allOf": [
        {
            "$ref": "#/definitions/workflow_skip_options"
        },
        {
            "$ref": "#/definitions/input_output_options"
        },
        {
            "$ref": "#/definitions/reference_genome_options"
        },
        {
            "$ref": "#/definitions/institutional_config_options"
        },
        {
            "$ref": "#/definitions/max_job_request_options"
        },
        {
            "$ref": "#/definitions/generic_options"
        },
        {
            "$ref": "#/definitions/workflow_options"
        },
        {
            "$ref": "#/definitions/file_inputs"
        }
    ]
}
