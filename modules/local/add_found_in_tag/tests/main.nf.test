nextflow_process {

    name "Test Process ADD_FOUND_IN_TAG"
    script "../main.nf"
    process "ADD_FOUND_IN_TAG"

    tag "modules"
    tag "modules_local"
    tag "bcftools"
    tag "add_found_in_tag"

    test("sarscov2 - [vcf, []], variant_caller") {

        when {
            process {
                """
                input[0] = [
                    [ id:'out', single_end:false ], // meta map
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/vcf/test.vcf.gz', checkIfExists: true),
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/vcf/test.vcf.gz.tbi', checkIfExists: true)
                ]
                input[1] = 'variant_caller'
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert file(process.out.vcf.get(0).get(1)).readLines().any { it.contains("FOUND_IN=variant_caller") } },
                { assert snapshot(
                    path(process.out.vcf.get(0).get(1)).vcf.variantsMD5,
                    process.out.versions
                ).match() }
            )
        }

    }

    test("sarscov2 - [vcf, []], variant_caller -stub") {

        options "-stub"

        when {
            process {
                """
                input[0] = [
                    [ id:'out', single_end:false ], // meta map
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/vcf/test.vcf.gz', checkIfExists: true),
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/vcf/test.vcf.gz.tbi', checkIfExists: true)
                ]
                input[1] = 'variant_caller'
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }

    }

}
