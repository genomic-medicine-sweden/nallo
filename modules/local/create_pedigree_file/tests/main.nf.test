nextflow_process {

    name "Test Process CREATE_PEDIGREE_FILE"
    script "../main.nf"
    process "CREATE_PEDIGREE_FILE"

    tag "modules"
    tag "modules_local"
    tag "create_pedigree_file"

    test("create_pedigree_file - one sample") {

        when {
            process {
                """
                input[0] = Channel.of(
                    [ 'project',
                    [
                        [id:'HG002.Revio', family_id:'family', paternal_id:0, maternal_id:0, sex:0, phenotype:2, project:'project', n_files:1, single_end:true]
                    ]
                ])
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
                    path(process.out.ped.get(0).get(1)).readLines(),
                    process.out.versions
                ).match() }
            )
        }
    }

    test("create_pedigree_file - multiple samples") {

        when {
            process {
                """
                input[0] = Channel.of(
                    [ 'test',
                    [
                        [id:'HG002_Revio_AB', family_id:'FAM2', paternal_id:0, maternal_id:0, sex:0, phenotype:1, project:'test', n_files:1, single_end:true],
                        [id:'HG002_Revio_AA', family_id:'FAM2', paternal_id:0, maternal_id:0, sex:0, phenotype:1, project:'test', n_files:1, single_end:true],
                        [id:'HG002_Revio_B', family_id:'FAM1', paternal_id:0, maternal_id:0, sex:0, phenotype:1, project:'test', n_files:2, single_end:true],
                        [id:'HG002_Revio_A', family_id:'FAM1', paternal_id:0, maternal_id:0, sex:0, phenotype:2, project:'test', n_files:1, single_end:true],
                        [id:'HG002_Revio_B', family_id:'FAM1', paternal_id:0, maternal_id:0, sex:0, phenotype:1, project:'test', n_files:2, single_end:true]
                    ]
                ])
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
                    path(process.out.ped.get(0).get(1)).readLines(),
                    process.out.versions
                ).match() }
            )
        }
    }

}
