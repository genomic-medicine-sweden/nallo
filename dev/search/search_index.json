{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"genomic-medicine-sweden/nallo","text":""},{"location":"#introduction","title":"Introduction","text":"<p>genomic-medicine-sweden/nallo is a bioinformatics analysis pipeline for long-reads from both PacBio and (targeted) ONT-data, focused on rare-disease. Heavily influenced by best-practice pipelines such as nf-core/sarek, nf-core/raredisease, nf-core/nanoseq, PacBio Human WGS Workflow, epi2me-labs/wf-human-variation and brentp/rare-disease-wf.</p> <p> </p>"},{"location":"#pipeline-summary","title":"Pipeline summary","text":""},{"location":"#qc","title":"QC","text":"<ul> <li>Read QC with FastQC, cramino and mosdepth</li> </ul>"},{"location":"#alignment-assembly","title":"Alignment &amp; assembly","text":"<ul> <li>Align reads to reference with minimap2</li> <li>Assemble (trio-binned) haploid genomes with hifiasm (HiFi only)</li> </ul>"},{"location":"#variant-calling","title":"Variant calling","text":"<ul> <li>Call SNVs &amp; joint genotyping with deepvariant and GLNexus</li> <li>Call SVs with Severus or Sniffles2</li> <li>Call CNVs with HiFiCNV</li> <li>Call tandem repeats with TRGT (HiFi only)</li> <li>Call paralogous genes with Paraphase</li> <li>Call variants from assembly with dipcall (HiFi only)</li> </ul>"},{"location":"#phasing-and-methylation","title":"Phasing and methylation","text":"<ul> <li>Phase and haplotag reads with LongPhase, whatshap or HiPhase</li> <li>Create methylation pileups with modkit</li> </ul>"},{"location":"#annotation","title":"Annotation","text":"<ul> <li>Annotate SNVs and INDELs with databases of choice, i.e. gnomAD, CADD etc. with echtvar and VEP</li> <li>Annotate repeat expansions with stranger</li> <li>Annotate SVs with SVDB and VEP</li> </ul>"},{"location":"#ranking","title":"Ranking","text":"<ul> <li>Rank SNVs with GENMOD</li> </ul>"},{"location":"#usage","title":"Usage","text":"<p>Note</p> <p>If you are new to Nextflow and nf-core, please refer to this page on how to set-up Nextflow. Make sure to test your setup with <code>-profile test</code> before running the workflow on actual data.</p> <p>Prepare a samplesheet with input data:</p> <p><code>samplesheet.csv</code></p> <pre><code>project,sample,file,family_id,paternal_id,maternal_id,sex,phenotype\nNIST,HG002,/path/to/HG002.fastq.gz,FAM1,HG003,HG004,1,2\nNIST,HG005,/path/to/HG005.bam,FAM1,HG003,HG004,2,1\n</code></pre> <p>Supply a reference genome with <code>--fasta</code> and choose a matching <code>--preset</code> for your data (<code>revio</code>, <code>pacbio</code>, <code>ONT_R10</code>). Now, you can run the pipeline using:</p> <pre><code>nextflow run genomic-medicine-sweden/nallo \\\n    -profile &lt;docker/singularity/.../institute&gt; \\\n    --input samplesheet.csv \\\n    --preset &lt;revio/pacbio/ONT_R10&gt; \\\n    --fasta &lt;reference.fasta&gt; \\\n    --outdir &lt;OUTDIR&gt;\n</code></pre> <p>Warning</p> <p>Please provide pipeline parameters via the CLI or Nextflow <code>-params-file</code> option. Custom config files including those provided by the <code>-c</code> Nextflow option can be used to provide any configuration except for parameters;see docs.</p> <p>To run in an offline environment, download the pipeline and singularity images using <code>nf-core download</code>:</p> <pre><code>nf-core download genomic-medicine-sweden/nallo\n</code></pre> <p>For more details and further functionality, please refer to the usage documentation.</p>"},{"location":"#credits","title":"Credits","text":"<p>genomic-medicine-sweden/nallo was originally written by Felix Lenner.</p> <p>We thank the following people for their extensive assistance in the development of this pipeline:</p>"},{"location":"#contributions-and-support","title":"Contributions and Support","text":"<p>If you would like to contribute to this pipeline, please see the contributing guidelines.</p>"},{"location":"#citations","title":"Citations","text":"<p>If you use genomic-medicine-sweden/nallo for your analysis, please cite it using the following doi: 10.5281/zenodo.13748210.</p> <p>This pipeline uses code and infrastructure developed and maintained by the nf-core community, reused here under the MIT license.</p> <p>The nf-core framework for community-curated bioinformatics pipelines.</p> <p>Philip Ewels, Alexander Peltzer, Sven Fillinger, Harshil Patel, Johannes Alneberg, Andreas Wilm, Maxime Ulysse Garcia, Paolo Di Tommaso &amp; Sven Nahnsen.</p> <p>Nat Biotechnol. 2020 Feb 13. doi: 10.1038/s41587-020-0439-x.</p> <p>An extensive list of references for the tools used by the pipeline can be found in the <code>CITATIONS.md</code> file.</p>"},{"location":"CITATIONS/","title":"genomic-medicine-sweden/nallo: Citations","text":""},{"location":"CITATIONS/#nf-core","title":"nf-core","text":"<p>Ewels PA, Peltzer A, Fillinger S, Patel H, Alneberg J, Wilm A, Garcia MU, Di Tommaso P, Nahnsen S. The nf-core framework for community-curated bioinformatics pipelines. Nat Biotechnol. 2020 Mar;38(3):276-278. doi: 10.1038/s41587-020-0439-x. PubMed PMID: 32055031.</p>"},{"location":"CITATIONS/#nextflow","title":"Nextflow","text":"<p>Di Tommaso P, Chatzou M, Floden EW, Barja PP, Palumbo E, Notredame C. Nextflow enables reproducible computational workflows. Nat Biotechnol. 2017 Apr 11;35(4):316-319. doi: 10.1038/nbt.3820. PubMed PMID: 28398311.</p>"},{"location":"CITATIONS/#pipeline-tools","title":"Pipeline tools","text":"<ul> <li>BCFtools &amp; SAMtools</li> </ul> <p>Danecek P, Bonfield JK, Liddle J, et al. Twelve years of SAMtools and BCFtools. GigaScience. 2021;10(2):giab008. doi:10.1093/gigascience/giab008</p> <ul> <li>BEDTools</li> </ul> <p>Quinlan AR and Hall IM, 2010. BEDTools: a flexible suite of utilities for comparing genomic features. Bioinformatics. 26, 6, pp. 841\u2013842.</p> <ul> <li>cramino</li> </ul> <p>Wouter De Coster, Rosa Rademakers, NanoPack2: population-scale evaluation of long-read sequencing data, Bioinformatics, Volume 39, Issue 5, May 2023, btad311, https://doi.org/10.1093/bioinformatics/btad311</p> <ul> <li>CADD<sup>1</sup><sup>,</sup> <sup>2</sup></li> </ul> <p>Rentzsch P, Schubach M, Shendure J, Kircher M. CADD-Splice\u2014improving genome-wide variant effect prediction using deep learning-derived splice scores. Genome Med. 2021;13(1):31. doi:10.1186/s13073-021-00835-9</p> <p>Rentzsch P, Witten D, Cooper GM, Shendure J, Kircher M. CADD: predicting the deleteriousness of variants throughout the human genome. Nucleic Acids Research. 2019;47(D1):D886-D894. doi:10.1093/nar/gky1016</p> <ul> <li>DeepVariant</li> </ul> <p>Poplin R, Chang PC, Alexander D, et al. A universal SNP and small-indel variant caller using deep neural networks. Nat Biotechnol. 2018;36(10):983-987. doi:10.1038/nbt.4235</p> <ul> <li>dipcall</li> </ul> <p>Li H, Bloom JM, Farjoun Y, Fleharty M, Gauthier L, Neale B, MacArthur D (2018) A synthetic-diploid benchmark for accurate variant-calling evaluation. Nat Methods, 15:595-597. [PMID:30013044]</p> <ul> <li>echtvar</li> </ul> <p>Brent S Pedersen, Jeroen de Ridder, Echtvar: compressed variant representation for rapid annotation and filtering of SNPs and indels, Nucleic Acids Research, Volume 51, Issue 1, 11 January 2023, Page e3, https://doi.org/10.1093/nar/gkac931</p> <ul> <li>Ensembl VEP</li> </ul> <p>McLaren W, Gil L, Hunt SE, et al. The Ensembl Variant Effect Predictor. Genome Biol. 2016;17(1):122. doi:10.1186/s13059-016-0974-4</p> <ul> <li>FastQC</li> </ul> <p>Andrews, S. (2010). FastQC: A Quality Control Tool for High Throughput Sequence Data [Online].</p> <ul> <li>Genmod</li> </ul> <p>Magnusson M, Hughes T, Glabilloy, Bitdeli Chef. genmod: Version 3.7.3. Published online November 15, 2018. doi:10.5281/ZENODO.3841142</p> <ul> <li>Gfastats</li> </ul> <p>Giulio Formenti, Linelle Abueg, Angelo Brajuka, Nadolina Brajuka, Crist\u00f3bal Gallardo-Alba, Alice Giani, Olivier Fedrigo, Erich D Jarvis, Gfastats: conversion, evaluation and manipulation of genome sequences using assembly graphs, Bioinformatics, Volume 38, Issue 17, September 2022, Pages 4214\u20134216, https://doi.org/10.1093/bioinformatics/btac460</p> <ul> <li>GLnexus</li> </ul> <p>Yun T, Li H, Chang PC, Lin MF, Carroll A, McLean CY. Accurate, scalable cohort variant calls using DeepVariant and GLnexus. Robinson P, ed. Bioinformatics. 2021;36(24):5582-5589. doi:10.1093/bioinformatics/btaa1081</p> <ul> <li>hifiasm</li> </ul> <p>Cheng, H., Concepcion, G.T., Feng, X. et al. Haplotype-resolved de novo assembly using phased assembly graphs with hifiasm. Nat Methods 18, 170\u2013175 (2021). https://doi.org/10.1038/s41592-020-01056-5</p> <ul> <li>HiPhase</li> </ul> <p>James M Holt, Christopher T Saunders, William J Rowell, Zev Kronenberg, Aaron M Wenger, Michael Eberle, HiPhase: jointly phasing small, structural, and tandem repeat variants from HiFi sequencing, Bioinformatics, Volume 40, Issue 2, February 2024, btae042, https://doi.org/10.1093/bioinformatics/btae042</p> <ul> <li> <p>HiFiCNV</p> </li> <li> <p>LongPhase</p> </li> </ul> <p>Jyun-Hong Lin, Liang-Chi Chen, Shu-Chi Yu, Yao-Ting Huang, LongPhase: an ultra-fast chromosome-scale phasing algorithm for small and large variants, Bioinformatics, Volume 38, Issue 7, March 2022, Pages 1816\u20131822, https://doi.org/10.1093/bioinformatics/btac058</p> <ul> <li>minimap2</li> </ul> <p>Heng Li, Minimap2: pairwise alignment for nucleotide sequences, Bioinformatics, Volume 34, Issue 18, September 2018, Pages 3094\u20133100, https://doi.org/10.1093/bioinformatics/bty191</p> <ul> <li> <p>modkit</p> </li> <li> <p>Mosdepth</p> </li> </ul> <p>Pedersen BS, Quinlan AR. Mosdepth: quick coverage calculation for genomes and exomes. Hancock J, ed. Bioinformatics. 2018;34(5):867-868. doi:10.1093/bioinformatics/btx699</p> <ul> <li>MultiQC</li> </ul> <p>Ewels P, Magnusson M, Lundin S, K\u00e4ller M. MultiQC: summarize analysis results for multiple tools and samples in a single report. Bioinformatics. 2016 Oct 1;32(19):3047-8. doi: 10.1093/bioinformatics/btw354. Epub 2016 Jun 16. PubMed PMID: 27312411; PubMed Central PMCID: PMC5039924.</p> <ul> <li>Paraphase</li> </ul> <p>Genome-wide profiling of highly similar paralogous genes using HiFi sequencing. Xiao Chen, Daniel Baker, Egor Dolzhenko, Joseph M Devaney, Jessica Noya, April S Berlyoung, Rhonda Brandon, Kathleen S Hruska, Lucas Lochovsky, Paul Kruszka, Scott Newman, Emily Farrow, Isabelle Thiffault, Tomi Pastinen, Dalia Kasperaviciute, Christian Gilissen, Lisenka Vissers, Alexander Hoischen, Seth Berger, Eric Vilain, Emmanu\u00e8le D\u00e9lot, UCI Genomics Research to Elucidate the Genetics of Rare Diseases (UCI GREGoR) Consortium, Michael A Eberle. bioRxiv 2024.04.19.590294; doi: https://doi.org/10.1101/2024.04.19.590294</p> <ul> <li>Severus</li> </ul> <p>Ayse Keskus, Asher Bryant, Tanveer Ahmad, Byunggil Yoo, Sergey Aganezov, Anton Goretsky, Ataberk Donmez, Lisa A. Lansdon, Isabel Rodriguez, Jimin Park, Yuelin Liu, Xiwen Cui, Joshua Gardner, Brandy McNulty, Samuel Sacco, Jyoti Shetty, Yongmei Zhao, Bao Tran, Giuseppe Narzisi, Adrienne Helland, Daniel E. Cook, Pi-Chuan Chang, Alexey Kolesnikov, Andrew Carroll, Erin K. Molloy, Irina Pushel, Erin Guest, Tomi Pastinen, Kishwar Shafin, Karen H. Miga, Salem Malikic, Chi-Ping Day, Nicolas Robine, Cenk Sahinalp, Michael Dean, Midhat S. Farooqi, Benedict Paten, Mikhail Kolmogorov. Severus: accurate detection and characterization of somatic structural variation in tumor genomes using long reads. medRxiv 2024.03.22.24304756; doi: https://doi.org/10.1101/2024.03.22.24304756</p> <ul> <li>Sniffles2</li> </ul> <p>Smolka, M., Paulin, L.F., Grochowski, C.M. et al. Detection of mosaic and population-level structural variants with Sniffles2. Nat Biotechnol (2024). https://doi.org/10.1038/s41587-023-02024-y</p> <ul> <li>Somalier</li> </ul> <p>Pedersen, B.S., Bhetariya, P.J., Brown, J. et al. Somalier: rapid relatedness estimation for cancer and germline studies using efficient genome sketches. Genome Med 12, 62 (2020). https://doi.org/10.1186/s13073-020-00761-2</p> <ul> <li> <p>splitubam</p> </li> <li> <p>stranger</p> </li> </ul> <p>Nilsson D, Magnusson M. moonso/stranger v0.7.1. Published online February 18, 2021. doi:10.5281/ZENODO.4548873</p> <ul> <li>SVDB</li> </ul> <p>Eisfeldt et al., 2017.</p> <ul> <li>Tabix</li> </ul> <p>Li H. Tabix: fast retrieval of sequence features from generic TAB-delimited files. Bioinformatics. 2011;27(5):718-719. doi:10.1093/bioinformatics/btq671</p> <ul> <li>TRGT</li> </ul> <p>Dolzhenko, E., English, A., Dashnow, H. et al. Characterization and visualization of tandem repeats at genome scale. Nat Biotechnol (2024). https://doi.org/10.1038/s41587-023-02057-3</p> <ul> <li>WhatsHap</li> </ul> <p>Marcel Martin, Murray Patterson, Shilpa Garg, Sarah O Fischer, Nadia Pisanti, Gunnar W Klau, Alexander Sch\u00f6enhuth, Tobias Marschall. bioRxiv 085050; doi: https://doi.org/10.1101/085050</p> <ul> <li>yak</li> </ul>"},{"location":"CITATIONS/#software-packagingcontainerisation-tools","title":"Software packaging/containerisation tools","text":"<ul> <li>Anaconda</li> </ul> <p>Anaconda Software Distribution. Computer software. Vers. 2-2.4.0. Anaconda, Nov. 2016. Web.</p> <ul> <li>Bioconda</li> </ul> <p>Gr\u00fcning B, Dale R, Sj\u00f6din A, Chapman BA, Rowe J, Tomkins-Tinch CH, Valieris R, K\u00f6ster J; Bioconda Team. Bioconda: sustainable and comprehensive software distribution for the life sciences. Nat Methods. 2018 Jul;15(7):475-476. doi: 10.1038/s41592-018-0046-7. PubMed PMID: 29967506.</p> <ul> <li>BioContainers</li> </ul> <p>da Veiga Leprevost F, Gr\u00fcning B, Aflitos SA, R\u00f6st HL, Uszkoreit J, Barsnes H, Vaudel M, Moreno P, Gatto L, Weber J, Bai M, Jimenez RC, Sachsenberg T, Pfeuffer J, Alvarez RV, Griss J, Nesvizhskii AI, Perez-Riverol Y. BioContainers: an open-source and community-driven framework for software standardization. Bioinformatics. 2017 Aug 15;33(16):2580-2582. doi: 10.1093/bioinformatics/btx192. PubMed PMID: 28379341; PubMed Central PMCID: PMC5870671.</p> <ul> <li>Docker</li> </ul> <p>Merkel, D. (2014). Docker: lightweight linux containers for consistent development and deployment. Linux Journal, 2014(239), 2. doi: 10.5555/2600239.2600241.</p> <ul> <li>Singularity</li> </ul> <p>Kurtzer GM, Sochat V, Bauer MW. Singularity: Scientific containers for mobility of compute. PLoS One. 2017 May 11;12(5):e0177459. doi: 10.1371/journal.pone.0177459. eCollection 2017. PubMed PMID: 28494014; PubMed Central PMCID: PMC5426675.</p>"},{"location":"output/","title":"genomic-medicine-sweden/nallo: Output","text":""},{"location":"output/#aligned-reads","title":"Aligned reads","text":"<p>Minimap2 is used to map the reads to a reference genome. The aligned reads are sorted, (merged) and indexed using samtools.</p> Path Description <code>aligned_reads/minimap2/{sample}/*.bam</code> Alignment file in bam format <code>aligned_reads/minimap2/{sample}/*.bai</code> Index of the corresponding bam file <p>If the pipeline is run with phasing, the aligned reads will be happlotagged using the active phasing tool.</p> Path Description <code>{outputdir}/aligned_reads/{sample}/{sample}_haplotagged.bam</code> BAM file with haplotags <code>{outputdir}/aligned_reads/{sample}/{sample}_haplotagged.bam.bai</code> Index of the BAM file <p>Note</p> <p>Alignments will only be output without haplotags if phasing is off.</p>"},{"location":"output/#assembly","title":"Assembly","text":"<p>Hifiasm is used to assemble genomes. The assembled haplotypes are then comverted to fasta files using gfastats. A deconstructed version of dipcall is to map the assembled haplotypes back to the reference genome.</p> Path Description <code>assembly_haplotypes/gfastats/{sample}/*hap1.p_ctg.fasta.gz</code> Assembled haplotype 1 <code>assembly_haplotypes/gfastats/{sample}/*hap2.p_ctg.fasta.gz</code> Assembled haplotype 2 <code>assembly_haplotypes/gfastats/{sample}/*.assembly_summary</code> Summary statistics <code>assembly_variant_calling/dipcall/{sample}/*hap1.bam</code> Assembled haplotype 1 mapped to the reference genome <code>assembly_variant_calling/dipcall/{sample}/*hap1.bai</code> Index of the corresponding BAM file for haplotype 1 <code>assembly_variant_calling/dipcall/{sample}/*hap2.bam</code> Assembled haplotype 2 mapped to the reference genome <code>assembly_variant_calling/dipcall/{sample}/*hap2.bai</code> Index of the corresponding BAM file for haplotype 2"},{"location":"output/#methylation-pileups","title":"Methylation pileups","text":"<p>Modkit is used to create methylation pileups, producing bedMethyl files for both haplotagged and ungrouped reads. Additionaly, methylation information can be viewed in the BAM files, for example in IGV.</p> Path Description <code>methylation/modkit/pileup/phased/{sample}/*.modkit_pileup_phased_*.bed.gz</code> bedMethyl file with summary counts from haplotagged reads <code>methylation/modkit/pileup/phased/{sample}/*.modkit_pileup_phased_ungrouped.bed.gz</code> bedMethyl file for ungrouped reads <code>methylation/modkit/pileup/unphased/{sample}/*.modkit_pileup.bed.gz</code> bedMethyl file with summary counts from all reads <code>methylation/modkit/pileup/unphased/{sample}/*.bed.gz.tbi</code> Index of the corresponding bedMethyl file"},{"location":"output/#multiqc","title":"MultiQC","text":"<p>MultiQC generates an HTML report summarizing all samples' QC results and pipeline statistics.</p> Path Description <code>multiqc/multiqc_report.html</code> HTML report summarizing QC results <code>multiqc/multiqc_data/</code> Directory containing parsed statistics <code>multiqc/multiqc_plots/</code> Directory containing static report images"},{"location":"output/#pipeline-information","title":"Pipeline Information","text":"<p>Nextflow generates reports for troubleshooting, performance, and traceability.</p> Path Description <code>pipeline_info/execution_report.html</code> Execution report <code>pipeline_info/execution_timeline.html</code> Timeline report <code>pipeline_info/execution_trace.txt</code> Execution trace <code>pipeline_info/pipeline_dag.dot</code> Pipeline DAG in DOT format <code>pipeline_info/pipeline_report.html</code> Pipeline report <code>pipeline_info/software_versions.yml</code> Software versions used in the run"},{"location":"output/#phasing","title":"Phasing","text":"<p>LongPhase, WhatsHap, or HiPhase are used for phasing.</p> Path Description <code>{outputdir}/aligned_reads/{sample}/{sample}_haplotagged.bam</code> BAM file with haplotags <code>{outputdir}/aligned_reads/{sample}/{sample}_haplotagged.bam.bai</code> Index of the BAM file <code>{outputdir}/phased_variants/{sample}/*.vcf.gz</code> VCF file with phased variants <code>{outputdir}/phased_variants/{sample}/*.vcf.gz.tbi</code> Index of the VCF file <code>{outputdir}/qc/phasing_stats/{sample}/*.blocks.tsv</code> Phase block file <code>{outputdir}/qc/phasing_stats/{sample}/*.stats.tsv</code> Phasing statistics file"},{"location":"output/#qc","title":"QC","text":"<p>FastQC, cramino, mosdepth, and somalier are used for read quality control.</p>"},{"location":"output/#fastqc","title":"FastQC","text":"<p>FastQC provides general quality metrics for sequenced reads, including information on quality score distribution, per-base sequence content (%A/T/G/C), adapter contamination, and overrepresented sequences. For more details, refer to the FastQC help pages.</p> Path Description <code>{outputdir}/qc/fastqc/{sample}/*_fastqc.html</code> FastQC report containing quality metrics <code>{outputdir}/qc/fastqc/{sample}/*_fastqc.zip</code> Zip archive with the FastQC report, data files, and plot images"},{"location":"output/#mosdepth","title":"Mosdepth","text":"<p>Mosdepth is used to report quality control metrics such as coverage and GC content from alignment files.</p> Path Description <code>{outputdir}/qc/mosdepth/{sample}/*.mosdepth.global.dist.txt</code> Cumulative distribution of bases covered for at least a given coverage value, across chromosomes and the whole genome <code>{outputdir}/qc/mosdepth/{sample}/*.mosdepth.region.dist.txt</code> Cumulative distribution of bases covered for at least a given coverage value, across regions (if a BED file is used) <code>{outputdir}/qc/mosdepth/{sample}/*.mosdepth.summary.txt</code> Mosdepth summary file <code>{outputdir}/qc/mosdepth/{sample}/*.regions.bed.gz</code> Depth per region (if a BED file is used) <code>{outputdir}/qc/mosdepth/{sample}/*.regions.bed.gz.csi</code> Index of the regions.bed.gz file"},{"location":"output/#cramino","title":"Cramino","text":"<p>cramino is used to analyze both phased and unphased reads.</p> Path Description <code>{outputdir}/qc/cramino/phased/{sample}/*.arrow</code> Read length and quality in Apache Arrow format <code>{outputdir}/qc/cramino/phased/{sample}/*.txt</code> Summary information in text format <code>{outputdir}/qc/cramino/unphased/{sample}/*.arrow</code> Read length and quality in Apache Arrow format <code>{outputdir}/qc/cramino/unphased/{sample}/*.txt</code> Summary information in text format"},{"location":"output/#somalier","title":"Somalier","text":"<p>somalier checks relatedness and sex.</p> Path Description <code>{outputdir}/predigree/{project}.ped</code> PED file updated with somalier-inferred sex <code>{outputdir}/qc/somalier/relate/{project}/{project}.html</code> HTML report <code>{outputdir}/qc/somalier/relate/{project}/{project}.pairs.tsv</code> Information about sample pairs <code>{outputdir}/qc/somalier/relate/{project}/{project}.samples.tsv</code> Information about individual samples"},{"location":"output/#variants","title":"Variants","text":""},{"location":"output/#cnvs","title":"CNVs","text":"<p>HiFiCNV is used to call CNVs, producing copy number, depth, and MAF tracks for IGV.</p> Path Description <code>cnv_calling/hificnv/{sample}/*.copynum.bedgraph</code> Copy number in bedgraph format <code>cnv_calling/hificnv/{sample}/*.depth.bw</code> Depth track in BigWig format <code>cnv_calling/hificnv/{sample}/*.maf.bw</code> Minor allele frequencies in BigWig format <code>cnv_calling/hificnv/{sample}/*.vcf.gz</code> VCF file containing CNV variants <code>cnv_calling/hificnv/{sample}/*.vcf.gz.tbi</code> Index of the corresponding VCF file"},{"location":"output/#paralogous-genes","title":"Paralogous genes","text":"<p>Paraphase is used to call paralogous genes.</p> Path Description <code>paraphase/{sample}/*.bam</code> BAM file with haplotypes grouped by HP <code>paraphase/{sample}/*.bai</code> Index of the BAM file <code>paraphase/{sample}/*.json</code> Summary of haplotypes and variant calls <code>paraphase/{sample}_paraphase_vcfs/{sample}_{gene}_vcf</code> VCF file per gene <code>paraphase/{sample}_paraphase_vcfs/{sample}_{gene}_vcf.tbi</code> Index of the VCF file"},{"location":"output/#repeats","title":"Repeats","text":"<p>TRGT is used to call repeats:</p> Path Description <code>{outputdir}/repeat_calling/trgt/multi_sample/{project}/*.vcf.gz</code> Merged VCF file for all samples <code>{outputdir}/repeat_calling/trgt/multi_sample/{project}/*.vcf.gz.tbi</code> Index of the VCF file <code>{outputdir}/repeat_calling/trgt/single_sample/{sample}/*.vcf.gz</code> VCF file with called repeats for a sample <code>{outputdir}/repeat_calling/trgt/single_sample/{sample}/*.vcf.gz.tbi</code> Index of the VCF file <code>{outputdir}/repeat_calling/trgt/single_sample/{sample}/*.bam</code> BAM file with sorted spanning reads <code>{outputdir}/repeat_calling/trgt/single_sample/{sample}/*.bai</code> Index of the BAM file <p>Stranger is used to annotate them:</p> Path Description <code>{outputdir}/repeat_annotation/stranger/{sample}/*.vcf.gz</code> Annotated VCF file <code>{outputdir}/repeat_annotation/stranger/{sample}/*.vcf.gz.tbi</code> Index of the annotated VCF file"},{"location":"output/#snvs","title":"SNVs","text":"<p>DeepVariant is used to call variants, while bcftools and GLnexus are used for merging variants.</p> <p>Note</p> <p>Variants are only output without annotation and ranking if these subworkflows are turned off.</p> Path Description <code>snvs/single_sample/{sample}/{sample}_snv.vcf.gz</code> VCF file containing called variants with alternative genotypes for a sample <code>snvs/single_sample/{sample}/{sample}_snv.vcf.gz.tbi</code> Index of the corresponding VCF file <code>snvs/multi_sample/{project}/{project}_snv.vcf.gz</code> VCF file containing called variants for all samples <code>snvs/multi_sample/{project}/{project}_snv.vcf.gz.tbi</code> Index of the corresponding VCF file <code>snvs/stats/single_sample/*.stats.txt</code> Variant statistics <p>echtvar and VEP are used for annotating SNVs, while CADD is used to annotate INDELs with CADD scores.</p> <p>Note</p> <p>Variants are only output without ranking if that subworkflows are turned off.</p> Path Description <code>databases/echtvar/encode/{project}/*.zip</code> Database with allele frequency (AF) and allele count (AC) for all samples <code>snvs/single_sample/{sample}/{sample}_snv_annotated.vcf.gz</code> VCF file containing annotated variants with alternative genotypes for a sample <code>snvs/single_sample/{sample}/{sample}_snv_annotated.vcf.gz.tbi</code> Index of the annotated VCF file <code>snvs/multi_sample/{project}/{project}_snv_annotated.vcf.gz</code> VCF file containing annotated variants for all samples <code>snvs/multi_sample/{project}/{project}_snv_annotated.vcf.gz.tbi</code> Index of the annotated VCF file <p>GENMOD is used to rank the annotated SNVs and INDELs.</p> Path Description <code>snvs/single_sample/{sample}/{sample}_snv_annotated_ranked.vcf.gz</code> VCF file with annotated and ranked variants for a sample <code>snvs/single_sample/{sample}/{sample}_snv_annotated_ranked.vcf.gz.tbi</code> Index of the ranked VCF file <code>snvs/multi_sample/{project}/{project}_snv_annotated_ranked.vcf.gz</code> VCF file with annotated and ranked variants for all samples <code>snvs/multi_sample/{project}/{project}_snv_annotated_ranked.vcf.gz.tbi</code> Index of the ranked VCF file"},{"location":"output/#svs","title":"SVs","text":"<p>Severus or Sniffles is used to call structural variants, and SVDB is used to merge variants within and between samples.</p> <p>Note</p> <p>Variants are only output without annotation if that subworkflow is turned off.</p> Path Description <code>svs/multi_sample/{project}/{project}_svs.vcf.gz</code> VCF file with merged structural variants for all samples <code>svs/multi_sample/{project}/{project}_svs.vcf.gz.tbi</code> Index of the merged VCF file <code>svs/single_sample/{sample}/*.vcf.gz</code> VCF file with merged structural variants for a single sample <code>svs/single_sample/{sample}/*.vcf.gz.tbi</code> Index of the VCF file <p>SVDB and VEP are used to annotate structural variants.</p> Path Description <code>svs/multi_sample/{project}/{project}_svs_annotated.vcf.gz</code> VCF file with annotated merged structural variants for all samples <code>svs/multi_sample/{project}/{project}_svs_annotated.vcf.gz.tbi</code> Index of the annotated VCF file <code>svs/single_sample/{sample}/*.vcf_annotated.gz</code> VCF file with annotated structural variants for a single sample <code>svs/single_sample/{sample}/*.vcf_annotated.gz.tbi</code> Index of the annotated VCF file"},{"location":"parameters/","title":"genomic-medicine-sweden/nallo pipeline parameters","text":"<p>Long-read variant calling pipeline</p>"},{"location":"parameters/#workflow-skip-options","title":"Workflow skip options","text":"<p>Allows skipping certain parts of the pipeline</p> Parameter Description Type Default Required Hidden <code>skip_qc</code> Skip QC of reads <code>boolean</code> False <code>skip_short_variant_calling</code> Skip short variant calling <code>boolean</code> False <code>skip_assembly_wf</code> Skip genome assembly and assembly variant calling <code>boolean</code> False <code>skip_mapping_wf</code> Skip read mapping (alignment) <code>boolean</code> False <code>skip_methylation_wf</code> Skip generation of methylation pileups <code>boolean</code> False <code>skip_repeat_calling</code> Skip tandem repeat calling <code>boolean</code> False <code>skip_repeat_annotation</code> Skip tandem repeat annotation <code>boolean</code> False <code>skip_phasing_wf</code> Skip phasing of variants and haplotagging of reads <code>boolean</code> False <code>skip_snv_annotation</code> Skip short variant annotation <code>boolean</code> False <code>skip_sv_annotation</code> Skip structural variant annotation <code>boolean</code> False <code>skip_cnv_calling</code> Skip CNV calling <code>boolean</code> False <code>skip_call_paralogs</code> Skip the calling of specific paralogous genes <code>boolean</code> False <code>skip_rank_variants</code> Skip ranking of short variants <code>boolean</code> False"},{"location":"parameters/#inputoutput-options","title":"Input/output options","text":"<p>Define where the pipeline should find input data and save output data.</p> Parameter Description Type Default Required Hidden <code>input</code> Path to comma-separated file containing information about the samples in the experiment. HelpYou will need to create a design file with information about the samples in your experiment before running the pipeline. Use this parameter to specify its location. It has to be a comma-separated file with 3 columns, and a header row. <code>string</code> True <code>outdir</code> The output directory where the results will be saved. You have to use absolute paths to storage on Cloud infrastructure. <code>string</code> True <code>email</code> Email address for completion summary. HelpSet this parameter to your e-mail address to get a summary e-mail with details of the run sent to you when the workflow exits. If set in your user config file (<code>~/.nextflow/config</code>) then you don't need to specify this on the command line for every run. <code>string</code> <code>multiqc_title</code> MultiQC report title. Printed as page header, used for filename if not otherwise specified. <code>string</code> <code>cadd_prescored</code> Path to a directory containing prescored indels for CADD. HelpThis folder contains the compressed files and indexes that would otherwise be in data/prescored folder as described in https://github.com/kircherlab/CADD-scripts/#manual-installation. <code>string</code> <code>cadd_resources</code> Path to a directory containing CADD annotations. HelpThis folder contains the uncompressed files that would otherwise be in data/annotation folder as described in https://github.com/kircherlab/CADD-scripts/#manual-installation. <code>string</code> <code>par_regions</code> Provide a bed file of chrX and chrY PAR regions for dipcall and DeepVariant <code>string</code> <code>tandem_repeats</code> A tandem repeat BED file for sniffles <code>string</code> <code>trgt_repeats</code> A BED file with repeats to be genotyped with TRGT <code>string</code> <code>snp_db</code> A csv file with echtvar databases to annotate SNVs with <code>string</code> <code>svdb_dbs</code> Databases used for structural variant annotation in vcf format. HelpPath to comma-separated file containing information about the databases used for structural variant annotation. <code>string</code> <code>variant_catalog</code> A variant catalog json-file for stranger <code>string</code> <code>variant_consequences_snv</code> File containing list of SO terms listed in the order of severity from most severe to lease severe for annotating genomic SNVs. For more information check https://ensembl.org/info/genome/variation/prediction/predicted_data.html <code>string</code> <code>vep_cache</code> A path to the VEP cache location <code>string</code> <code>bed</code> A BED file with regions of interest, used to limit short variant calling. <code>string</code> <code>hificnv_xy</code> A BED file containing expected copy number regions for XY samples. <code>string</code> <code>hificnv_xx</code> A BED file containing expected copy number regions for XX samples. <code>string</code> <code>hificnv_exclude</code> A BED file specifying regions to exclude with HiFiCNV, such as centromeres. <code>string</code> <code>reduced_penetrance</code> A file with gene ids that have reduced penetrance. For use with genmod. <code>string</code> <code>score_config_snv</code> A SNV rank model config file for genmod. <code>string</code> <code>somalier_sites</code> A VCF of known polymorphic sites for somalier <code>string</code> <code>pipelines_testdata_base_path</code> Base URL or local path to location of pipeline test dataset files <code>string</code> https://raw.githubusercontent.com/genomic-medicine-sweden/test-datasets/7be7114cb132be8cae9343f225bcf42ec11ecc1b/ True"},{"location":"parameters/#reference-genome-options","title":"Reference genome options","text":"<p>Reference genome related files and options required for the workflow.</p> Parameter Description Type Default Required Hidden <code>fasta</code> Reference genome <code>string</code>"},{"location":"parameters/#institutional-config-options","title":"Institutional config options","text":"<p>Parameters used to describe centralised config profiles. These should not be edited.</p> Parameter Description Type Default Required Hidden <code>custom_config_version</code> Git commit id for Institutional configs. <code>string</code> master True <code>custom_config_base</code> Base directory for Institutional configs. HelpIf you're running offline, Nextflow will not be able to fetch the institutional config files from the internet. If you don't need them, then this is not a problem. If you do need them, you should download the files from the repo and tell Nextflow where to find them with this parameter. <code>string</code> https://raw.githubusercontent.com/nf-core/configs/master True <code>config_profile_name</code> Institutional config name. <code>string</code> True <code>config_profile_description</code> Institutional config description. <code>string</code> True <code>config_profile_contact</code> Institutional config contact information. <code>string</code> True <code>config_profile_url</code> Institutional config URL link. <code>string</code> True"},{"location":"parameters/#generic-options","title":"Generic options","text":"<p>Less common options for the pipeline, typically set in a config file.</p> Parameter Description Type Default Required Hidden <code>version</code> Display version and exit. <code>boolean</code> True <code>publish_dir_mode</code> Method used to save pipeline results to output directory. HelpThe Nextflow <code>publishDir</code> option specifies which intermediate files should be saved to the output directory. This option tells the pipeline what method should be used to move these files. See Nextflow docs for details. <code>string</code> copy True <code>email_on_fail</code> Email address for completion summary, only when pipeline fails. HelpAn email address to send a summary email to when the pipeline is completed - ONLY sent if the pipeline does not exit successfully. <code>string</code> True <code>plaintext_email</code> Send plain-text email instead of HTML. <code>boolean</code> True <code>max_multiqc_email_size</code> File size limit when attaching MultiQC reports to summary emails. <code>string</code> 25.MB True <code>monochrome_logs</code> Do not use coloured log outputs. <code>boolean</code> True <code>hook_url</code> Incoming hook URL for messaging service HelpIncoming hook URL for messaging service. Currently, MS Teams and Slack are supported. <code>string</code> True <code>multiqc_config</code> Custom config file to supply to MultiQC. <code>string</code> True <code>multiqc_logo</code> Custom logo file to supply to MultiQC. File name must also be set in the MultiQC config file <code>string</code> True <code>multiqc_methods_description</code> Custom MultiQC yaml file containing HTML including a methods description. <code>string</code> <code>validate_params</code> Boolean whether to validate parameters against the schema at runtime <code>boolean</code> True True"},{"location":"parameters/#workflow-options","title":"Workflow options","text":"<p>Workflow options specific to genomic-medicine-sweden/nallo</p> Parameter Description Type Default Required Hidden <code>preset</code> Enable or disable certain parts of the pipeline by default, depending on data type (<code>revio</code>, <code>pacbio</code>, <code>ONT_R10</code>) <code>string</code> revio True <code>variant_caller</code> Which short variant software to use (<code>deepvariant</code>) <code>string</code> deepvariant <code>sv_caller</code> Which structural variant caller to use (<code>severus</code>, <code>sniffles</code>) <code>string</code> severus <code>phaser</code> Which phasing software to use (<code>longphase</code>, <code>whatshap</code>, <code>hiphase</code>) <code>string</code> longphase <code>hifiasm_mode</code> Run hifiasm in hifi-only or hifi-trio mode (<code>hifi-only</code>, <code>trio-binning</code>) <code>string</code> hifi-only <code>parallel_alignments</code> If parallel_alignments is bigger than 1, input files will be split and aligned in parallel to reduce processing time. <code>integer</code> 1 <code>parallel_snv</code> If parallel_snv is bigger than 1, short variant calling will be done in parallel to reduce processing time. <code>integer</code> 13 <code>vep_cache_version</code> VEP cache version <code>integer</code> 110 <code>vep_plugin_files</code> A csv file with vep_plugins as header, and then paths to vep plugin files. Paths to pLI_values.txt and LoFtool_scores.txt are required. <code>string</code> <code>deepvariant_model_type</code> Sets the model type used for DeepVariant. This is set automatically using <code>--preset</code> by default. <code>string</code> PACBIO True <code>minimap2_read_mapping_preset</code> Sets the minimap2-preset (-x) for read alignment. This is set automatically using the pipeline <code>--preset</code> by default. <code>string</code> True <code>extra_modkit_options</code> Extra options to modkit, used for test profile. <code>string</code> True <code>extra_vep_options</code> Extra options to VEP, used for test profile. <code>string</code> True <code>extra_paraphase_options</code> Extra options to Paraphase, used for test profile. <code>string</code> True <code>extra_hifiasm_options</code> Extra options to hifiasm, used for test profile. <code>string</code> True"},{"location":"usage/","title":"genomic-medicine-sweden/nallo: Usage","text":""},{"location":"usage/#prerequisites","title":"Prerequisites","text":"<ol> <li>Install Nextflow (&gt;=24.04.2) using the instructions here.</li> <li>Install one of the following technologies for full pipeline reproducibility: Docker, Singularity, Podman, Shifter or Charliecloud.</li> </ol> <p>Warning</p> <p>Almost all nf-core pipelines give you the option to use conda as well. However, some tools used in genomic-medicine-sweden/nallo do not have a conda package so we do not support conda at the moment.</p>"},{"location":"usage/#getting-started","title":"Getting started","text":"<p>Before running the pipeline with your data, we recommend running it with the test profile. You do not need to download any of the data as it will be fetched automatically for you when you use the test profile.</p> <p>Run the following command, where YOURPROFILE is the package manager you installed on your machine. For example, <code>-profile test,docker</code> or <code>-profile test,singularity</code></p> <pre><code>nextflow run genomic-medicine-sweden/nallo \\\n    -profile test,&lt;YOURPROFILE&gt; \\\n    --outdir &lt;OUTDIR&gt;\n</code></pre> <p>Note</p> <p>Check nf-core/configs to see if a custom config file to run nf-core pipelines already exists for your institute. If so, you can simply use <code>-profile test,&lt;institute&gt;</code> in your command. This enables the appropriate package manager and sets the appropriate execution settings for your machine. NB: The order of profiles is important! They are loaded in sequence, so later profiles can overwrite earlier profiles.</p> <p>Running the command creates the following files in your working directory</p> <pre><code>work                # Directory containing the Nextflow working files\n&lt;OUTDIR&gt;            # Finished results in specified location (defined with --outdir)\n.nextflow_log       # Log file from Nextflow\n# Other Nextflow hidden files, like history of pipeline logs.\n</code></pre> <p>Note</p> <p>The default cpu and memory configurations used in nallo are written keeping the test profile (and dataset, which is tiny) in mind. You should override these values in configs to get it to work on larger datasets. Check the section <code>custom-configuration</code> below to know more about how to configure resources for your platform.</p>"},{"location":"usage/#updating-the-pipeline","title":"Updating the pipeline","text":"<p>The above command downloads the pipeline from GitHub, caches it, and tests it on the test dataset. When you run the command again, it will fetch the pipeline from cache even if a more recent version of the pipeline is available. To make sure that you're running the latest version of the pipeline, update the cached version of the pipeline by including <code>-latest</code> in the command.</p>"},{"location":"usage/#running-genomic-medicine-swedennallo-with-your-data","title":"Running genomic-medicine-sweden/nallo with your data","text":"<p>Running the pipeline on real data involves three steps:</p> <ol> <li>Preparing a samplesheet with your data</li> <li>Gather required files and references</li> <li>Supply samplesheet, refeferences and files and run the pipeline</li> </ol>"},{"location":"usage/#samplesheet","title":"Samplesheet","text":"<p>First, you will need to create a samplesheet with information about the samples you would like to analyse before running the pipeline. Use this parameter to specify its location.</p> <pre><code>--input '[path to samplesheet file]'\n</code></pre> <p>It has to be a comma-separated file with 7 columns, and a header row as shown in the example below:</p> <pre><code>project,sample,file,family_id,paternal_id,maternal_id,sex,phenotype\ntestrun,HG002,/path/to/HG002.fastq.gz,FAM,HG003,0,1,2\ntestrun,HG003,/path/to/HG003.bam,FAM,0,0,2,1\n</code></pre> Fields Description <code>project</code> Project name must be provided and cannot contain spaces, needs to be the same for all samples.\" <code>sample</code> Custom sample name, cannot contain spaces. <code>file</code> Absolute path to gzipped FASTQ or BAM file. File has to have the extension \".fastq.gz\", .fq.gz\" or \".bam\". <code>family_id</code> Family ID must be provided and cannot contain spaces. If no family ID is available use the same ID as sample. <code>paternal_id</code> Paternal ID must be provided and cannot contain spaces. If no paternal ID is available, use 0. <code>maternal_id</code> Maternal ID must be provided and cannot contain spaces. If no maternal ID is available, use 0. <code>sex</code> Sex must be provided as 0, 1 or 2 (0=unknown; 1=male; 2=female). If sex is unknown it will be assigned automatically if possible. <code>phenotype</code> Affected status of patient (0 = missing; 1=unaffected; 2=affected). <p>An example samplesheet has been provided with the pipeline.</p>"},{"location":"usage/#presets","title":"Presets","text":"<p>This pipeline comes with three different presets that should be set with the <code>--preset</code> parameter: <code>revio</code> (default), <code>pacbio</code> or <code>ONT_R10</code>.</p> <p>Effect of preset on subworkflows</p> <p>The selected preset will turn off subworkflows:</p> <ul> <li><code>--skip_assembly_wf</code> and <code>--skip_repeat_wf</code> will be set to <code>true</code> for <code>ONT_R10</code></li> <li><code>--skip_methylation_wf</code> will be set to <code>true</code> for <code>pacbio</code></li> </ul>"},{"location":"usage/#subworkflows","title":"Subworkflows","text":"<p>As indicated above, this pipeline is divided into multiple subworkflows, each with its own input requirements and outputs. By default, all subworklows are active, and thus all mandatory input files are required.</p> <p>The only mandatory parameters for all subworkflows is the <code>--input</code> and <code>--outdir</code> parameters, all other parameters are determined by the active subworkflows.</p> <p>For example, if you would run <code>nextflow run genomic-medicine-sweden/nallo -profile docker --outdir results --input samplesheet.csv</code>, the pipeline will try to guide you through which files are required:</p> <pre><code>~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n  --skip_assembly_wf is NOT active, the following files are required: --dipcall_par\n  --skip_snv_annotation is NOT active, the following files are required: --snp_db\n  --skip_mapping_wf is NOT active, the following files are required: --somalier_sites\n  --skip_snv_annotation is NOT active, the following files are required: --vep_cache\n  ...\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n</code></pre> <p>A thorough description of required files are provided below.</p> <p>Additionally, if you want to skip a subworkflow, you will need to explicitly state to skip all subworkflows that rely on it.</p> <p>For example, <code>nextflow run genomic-medicine-sweden/nallo -profile docker --outdir results --input samplesheet.csv --skip_mapping_wf</code> will tell you</p> <pre><code>~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n  --skip_mapping_wf is active, the pipeline has to be run with: --skip_qc --skip_assembly_wf --skip_call_paralogs --skip_short_variant_calling --skip_snv_annotation --skip_cnv_calling --skip_phasing_wf --skip_rank_variants --skip_repeat_calling --skip_repeat_annotation --skip_methylation_wf\n  ...\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n</code></pre> <p>Because almost all other subworkflows relies on the mapping subworkflow.</p>"},{"location":"usage/#reference-files-and-parameters","title":"Reference files and parameters","text":"<p>As descibed above, the files required depend on the active subworkflows. All parameters are listed here, but the most useful parameters needed to run the pipeline described in more detail below.</p>"},{"location":"usage/#mapping","title":"Mapping","text":"<p>The majority of subworkflows depend on the mapping (alignment) subworkflow which requires <code>--fasta</code> and <code>--somalier_sites</code>.</p> Parameter Description <code>fasta</code> Reference genome, either gzipped or uncompressed FASTA (e.g. GCA_000001405.15_GRCh38_no_alt_analysis_set.fna.gz) <code>somalier_sites</code> A VCF of known polymorphic sites (e.g. sites.hg38.vcg.gz), from which sex will be inferred if possible. <p>Turned off with <code>--skip_mapping_wf</code>.</p>"},{"location":"usage/#qc","title":"QC","text":"<p>This subworkflow depends on the mapping subworkflow, but requires no additional files.</p> <p>Turned off with <code>--skip_qc</code>.</p>"},{"location":"usage/#assembly","title":"Assembly","text":"<p>This subworkflow contains both genome assembly and assembly variant calling. The assemblyt variant calling needs the sex of samples and for samples with unknown sex this is inferred from aligned reads, therefore it depends on the mapping subworkflow.</p> <p>It requires a BED file with PAR regions.</p> Parameter Description <code>par_regions</code> A BED file with PAR regions (e.g. GRCh38_PAR.bed) <p>Warning</p> <p>Make sure chrY PAR is hard masked in reference genome you are using.</p> <p>Turned off with <code>--skip_assembly_wf</code>.</p>"},{"location":"usage/#call-paralogs","title":"Call paralogs","text":"<p>This subworkflow depends on the mapping subworkflow, but requires no additional files.</p> <p>!!warning Only GRCh38 is supported.</p> <p>Turned off with <code>--skip_call_paralogs</code>.</p>"},{"location":"usage/#short-variant-calling","title":"Short variant calling","text":"<p>This subworkflow depends on the mapping subworkflow, and required the same PAR regions file as the assembly workflow.</p> Parameter Description <code>par_regions</code> A BED file with PAR regions (e.g. GRCh38_PAR.bed) <p>Turned off with <code>--skip_short_variant_calling</code>.</p>"},{"location":"usage/#cnv-calling","title":"CNV calling","text":"<p>This subworkflow depends on the mapping and short variant calling subworkflows, and requires the following additional files:</p> Parameter Description <code>hificnv_xy</code> expected XY copy number regions for your reference genome (e.g. expected_cn.hg38.XY.bed) <code>hificnv_xx</code> expected XX copy number regions for your reference genome (e.g. expected_cn.hg38.XX.bed) <code>hificnv_exclude</code> BED file specifying regions to exclude (e.g. cnv.excluded_regions.hg38.bed.gz) <p>Turned off with <code>--skip_cnv_calling</code>.</p>"},{"location":"usage/#phasing","title":"Phasing","text":"<p>This subworkflow phases variants and haplotags aligned BAM files, and such relies on the mapping and short variant calling subworkflows, but requires no additional files.</p> <p>Turned off with <code>--skip_phasing_wf</code>.</p>"},{"location":"usage/#methylation","title":"Methylation","text":"<p>This subworkflow relies on mapping, short variant calling and phasing subworkflows, but requires no additional files.</p> <p>Turned off with <code>--skip_methylation_wf</code>.</p>"},{"location":"usage/#repeat-calling","title":"Repeat calling","text":"<p>This subworkflow requires haplotagged BAM files, and such relies on the mapping, short variant calling and phasing subworkflows, and requires the following additional files:</p> Parameter Description <code>trgt_repeats</code> a BED file with tandem repeats matching your reference genome (e.g. pathogenic_repeats.hg38.bed&gt;)) <p>Turned off with <code>--skip_repeat_calling</code>.</p>"},{"location":"usage/#repeat-annotation","title":"Repeat annotation","text":"<p>This subworkflow relies on the mapping, short variant calling, phasing and repeat calling subworkflows, and requires the following additional files:</p> Parameter Description <code>variant_catalog</code> a variant catalog matching your reference (e.g. variant_catalog_grch38.json) <p>Turned off with <code>--skip_repeat_annotation</code>.</p>"},{"location":"usage/#snv-annotation","title":"SNV annotation","text":"<p>This subworkflow relies on the mapping and short variant calling, and requires the following additional files:</p> Parameter Description <code>vep_cache</code> VEP cache matching your reference genome, either as a <code>.tar.gz</code> archive or path to a directory (e.g. homo_sapiens_vep_110_GRCh38.tar.gz) <code>vep_plugins</code> <sup>1</sup> A csv file with VEP plugin files, pLI and LoFtool are required. Example provided below. <code>snp_db</code> <sup>2</sup> \u00a0A csv file with annotation databases from (<code>echtvar encode</code>) <code>variant_consequences_snv</code> A list of SO terms listed in the order of severity from most severe to lease severe for annotating genomic and mitochondrial SNVs. Sample file here. You can learn more about these terms here <p><sup>1</sup> Example file for input with <code>--vep_plugins</code></p> <pre><code>vep_files\nhttps://raw.githubusercontent.com/genomic-medicine-sweden/test-datasets/nallo/reference/vep_plugins/spliceai_21_scores_raw_indel_-v1.3-.vcf.gz.tbi\nhttps://raw.githubusercontent.com/genomic-medicine-sweden/test-datasets/nallo/reference/vep_plugins/spliceai_21_scores_raw_indel_-v1.3-.vcf.gz\nhttps://raw.githubusercontent.com/genomic-medicine-sweden/test-datasets/nallo/reference/vep_plugins/spliceai_21_scores_raw_snv_-v1.3-.vcf.gz.tbi\nhttps://raw.githubusercontent.com/genomic-medicine-sweden/test-datasets/nallo/reference/vep_plugins/pLI_values.txt\nhttps://raw.githubusercontent.com/genomic-medicine-sweden/test-datasets/nallo/reference/vep_plugins/LoFtool_scores.txt\n</code></pre> <p><sup>2</sup> Example file for input with <code>--snp_db</code>:</p> <pre><code>sample,file\ngnomad,/path/to/gnomad.v3.1.2.echtvar.popmax.v2.zip\ncadd,/path/to/cadd.v1.6.hg38.zip\n</code></pre> <p>Warning</p> <p>Generating an echtvar database from a VCF-file is a fairly straightforward process described on the echtvar GitHub. However, the pre-made <code>gnomad.v3.1.2.echtvar.v2.zip</code> provided by them results in malformed INFO lines that are not compatible with genmod (run in the subsequent ranking subworkflow).</p> <p>For a very small test database that only overlaps the coordinates of the pipeline test data set, you could use <code>cadd.v1.6.hg38.test_data.zip</code> to get started.</p> <p>Tip</p> <p>Optionally, to calcuate CADD scores for small indels, supply a path to a folder containing cadd annotations with <code>--cadd_resources</code> and prescored indels with <code>--cadd_prescored</code>. Equivalent of the <code>data/annotations/</code> and <code>data/prescored/</code> folders described here. CADD scores for SNVs can be annotated through echvtvar and <code>--snp_db</code>.</p> <p>Turned off with <code>--skip_snv_annotation</code>.</p>"},{"location":"usage/#rank-snvs-and-indels","title":"Rank SNVs and INDELs","text":"<p>This subworkflow ranks SNVs, and relies on the mapping, short variant calling and SNV annotation subworkflows, and requires the following additional files:</p> Parameter Description <code>score_config_snv</code> \u00a0Used by GENMOD when ranking variants. Sample file here. <code>reduced_penetrance</code> A list of loci that show reduced penetrance in people. Sample file here <p><code>--skip_rank_variants</code>.</p>"},{"location":"usage/#sv-annotation","title":"SV annotation","text":"<p>This subworkflow relies on the mapping subworkflow, and requires the following additional files:</p> Parameter Description <code>svdb_dbs</code> <sup>1</sup> Csv file with databases used for structural variant annotation in vcf format. <p><sup>1</sup> Example file for input with <code>--svdb_dbs</code>:</p> <pre><code>filename,in_freq_info_key,in_allele_count_info_key,out_freq_info_key,out_allele_count_info_key\nhttps://github.com/genomic-medicine-sweden/test-datasets/raw/b9ff54b59cdd39df5b6e278a30b08d94075a644c/reference/colorsdb.test_data.vcf.gz,AF,AC,colorsdb_af,colorsdb_ac\n</code></pre> <p>These databases could for example come from CoLoRSdb.</p> <p>Turned off with <code>--skip_sv_annotation</code>.</p>"},{"location":"usage/#other-highlighted-parameters","title":"Other highlighted parameters","text":"<ul> <li>Limit SNV calling to regions in BED file (<code>--bed</code>).</li> <li>By default SNV-calling is split into 13 parallel processes, this speeds up the variant calling significantly. Limit this by setting <code>--parallel_snv</code> to a different number.</li> <li>By default the pipeline does not perform parallel alignment, but this can be changed by setting <code>--parallel_alignments</code> to split the alignment into multiple processes. This comes with some additional overhead, but speeds up the alignment significantly.</li> </ul>"},{"location":"usage/#reproducibility","title":"Reproducibility","text":"<p>It is a good idea to specify a pipeline version when running the pipeline on your data. This ensures that a specific version of the pipeline code and software are used when you run your pipeline. If you keep using the same tag, you'll be running the same version of the pipeline, even if there have been changes to the code since.</p> <p>First, go to the genomic-medicine-sweden/nallo releases page and find the latest pipeline version - numeric only (eg. <code>0.2.0</code>). Then specify this when running the pipeline with <code>-r</code> (one hyphen) - eg. <code>-r 0.2.0</code>. Of course, you can switch to another version by changing the number after the <code>-r</code> flag.</p> <p>This version number will be logged in reports when you run the pipeline, so that you'll know what you used when you look back in the future. For example, at the bottom of the MultiQC reports.</p> <p>To further assist in reproducbility, you can use share and re-use parameter files to repeat pipeline runs with the same settings without having to write out a command with every single parameter.</p> <p>Tip</p> <p>If you wish to share such profile (such as upload as supplementary material for academic publications), make sure to NOT include cluster specific paths to files, nor institutional specific profiles.</p>"},{"location":"usage/#core-nextflow-arguments","title":"Core Nextflow arguments","text":"<p>Note</p> <p>These options are part of Nextflow and use a single hyphen (pipeline parameters use a double-hyphen).</p>"},{"location":"usage/#-profile","title":"<code>-profile</code>","text":"<p>Use this parameter to choose a configuration profile. Profiles can give configuration presets for different compute environments.</p> <p>Several generic profiles are bundled with the pipeline which instruct the pipeline to use software packaged using different methods (Docker, Singularity, Podman, Shifter, Charliecloud, Apptainer, Conda) - see below.</p> <p>The pipeline also dynamically loads configurations from https://github.com/nf-core/configs when it runs, making multiple config profiles for various institutional clusters available at run time. For more information and to see if your system is available in these configs please see the nf-core/configs documentation.</p> <p>Note that multiple profiles can be loaded, for example: <code>-profile test,docker</code> - the order of arguments is important! They are loaded in sequence, so later profiles can overwrite earlier profiles.</p> <p>If <code>-profile</code> is not specified, the pipeline will run locally and expect all software to be installed and available on the <code>PATH</code>. This is not recommended, since it can lead to different results on different machines dependent on the computer enviroment.</p> <ul> <li><code>test</code></li> <li>A profile with a complete configuration for automated testing</li> <li>Includes links to test data so needs no other parameters</li> <li><code>docker</code></li> <li>A generic configuration profile to be used with Docker</li> <li><code>singularity</code></li> <li>A generic configuration profile to be used with Singularity</li> <li><code>podman</code></li> <li>A generic configuration profile to be used with Podman</li> <li><code>shifter</code></li> <li>A generic configuration profile to be used with Shifter</li> <li><code>charliecloud</code></li> <li>A generic configuration profile to be used with Charliecloud</li> <li><code>apptainer</code></li> <li>A generic configuration profile to be used with Apptainer</li> <li><code>wave</code></li> <li>A generic configuration profile to enable Wave containers. Use together with one of the above (requires Nextflow <code>24.03.0-edge</code> or later).</li> <li><code>conda</code></li> <li>A generic configuration profile to be used with Conda. Please only use Conda as a last resort i.e. when it's not possible to run the pipeline with Docker, Singularity, Podman, Shifter, Charliecloud, or Apptainer.</li> </ul>"},{"location":"usage/#-resume","title":"<code>-resume</code>","text":"<p>Specify this when restarting a pipeline. Nextflow will use cached results from any pipeline steps where the inputs are the same, continuing from where it got to previously. For input to be considered the same, not only the names must be identical but the files' contents as well. For more info about this parameter, see this blog post.</p> <p>You can also supply a run name to resume a specific run: <code>-resume [run-name]</code>. Use the <code>nextflow log</code> command to show previous run names.</p>"},{"location":"usage/#-c","title":"<code>-c</code>","text":"<p>Specify the path to a specific config file (this is a core Nextflow command). See the nf-core website documentation for more information.</p>"},{"location":"usage/#custom-configuration","title":"Custom configuration","text":""},{"location":"usage/#resource-requests","title":"Resource requests","text":"<p>Whilst the default requirements set within the pipeline will hopefully work for most people and with most input data, you may find that you want to customise the compute resources that the pipeline requests. Each step in the pipeline has a default set of requirements for number of CPUs, memory and time. For most of the steps in the pipeline, if the job exits with any of the error codes specified here it will automatically be resubmitted with higher requests (2 x original, then 3 x original). If it still fails after the third attempt then the pipeline execution is stopped.</p> <p>To change the resource requests, please see the max resources and tuning workflow resources section of the nf-core website.</p>"},{"location":"usage/#custom-containers","title":"Custom Containers","text":"<p>In some cases you may wish to change which container a step of the pipeline uses for a particular tool. By default nf-core pipelines use containers and software from the biocontainers or bioconda projects. However in some cases the pipeline specified version maybe out of date.</p> <p>To use a different container from the default container specified in a pipeline, please see the updating tool versions section of the nf-core website.</p>"},{"location":"usage/#custom-tool-arguments","title":"Custom Tool Arguments","text":"<p>A pipeline might not always support every possible argument or option of a particular tool used in pipeline. Fortunately, nf-core pipelines provide some freedom to users to insert additional parameters that the pipeline does not include by default.</p> <p>To learn how to provide additional arguments to a particular tool of the pipeline, please see the customising tool arguments section of the nf-core website.</p>"},{"location":"usage/#nf-coreconfigs","title":"nf-core/configs","text":"<p>In most cases, you will only need to create a custom config as a one-off but if you and others within your organisation are likely to be running nf-core pipelines regularly and need to use the same settings regularly it may be a good idea to request that your custom config file is uploaded to the <code>nf-core/configs</code> git repository. Before you do this please can you test that the config file works with your pipeline of choice using the <code>-c</code> parameter. You can then create a pull request to the <code>nf-core/configs</code> repository with the addition of your config file, associated documentation file (see examples in <code>nf-core/configs/docs</code>), and amending <code>nfcore_custom.config</code> to include your custom profile.</p> <p>See the main Nextflow documentation for more information about creating your own configuration files.</p> <p>If you have any questions or issues please send us a message on Slack on the <code>#configs</code> channel.</p>"},{"location":"usage/#running-in-the-background","title":"Running in the background","text":"<p>Nextflow handles job submissions and supervises the running jobs. The Nextflow process must run until the pipeline is finished.</p> <p>The Nextflow <code>-bg</code> flag launches Nextflow in the background, detached from your terminal so that the workflow does not stop if you log out of your session. The logs are saved to a file.</p> <p>Alternatively, you can use <code>screen</code> / <code>tmux</code> or similar tool to create a detached session which you can log back into at a later time. Some HPC setups also allow you to run nextflow within a cluster job submitted your job scheduler (from where it submits more jobs).</p>"},{"location":"usage/#nextflow-memory-requirements","title":"Nextflow memory requirements","text":"<p>In some cases, the Nextflow Java virtual machines can start to request a large amount of memory. We recommend adding the following line to your environment to limit this (typically in <code>~/.bashrc</code> or <code>~./bash_profile</code>):</p> <pre><code>NXF_OPTS='-Xms1g -Xmx4g'\n</code></pre>"},{"location":"usage/#running-the-pipeline-without-internet-access","title":"Running the pipeline without internet access","text":""},{"location":"usage/#download-pipeline-and-containers","title":"Download pipeline and containers","text":"<p>The pipeline and container images can be downloaded using <code>nf-core download</code>, e.g.:</p> <pre><code>nf-core download genomic-medicine-sweden/nallo -r 0.3.2\n</code></pre>"},{"location":"usage/#download-references","title":"Download references","text":"<p>When running offline, you will have to make all the reference data available locally. The test profile will not be able to fetch data automatically.</p>"},{"location":"usage/#download-plugins","title":"Download plugins","text":"<p>This section from the nf-core docs should be followed to download and transfer nextflow plugins from a computer connected to the internet to the offline environment.</p> <p>It is necessary to use an explicit version of <code>nf-validation</code> offline, or Nextflow will check for the most recent version online.</p> <p>Find the version of nf-validation you downloaded in <code>$HOME/.nextflow/plugins</code>, then specify this version for <code>nf-validation</code> in your configuration file:</p> <pre><code>plugins {\n        // Set the plugin version explicitly, otherwise nextflow will look for the newest version online.\n        id 'nf-schema@2.1.1'\n}\n</code></pre> <p>This should go in your Nextflow configuration file, specified with <code>-c &lt;YOURCONFIG&gt;</code> when running the pipeline.</p>"}]}