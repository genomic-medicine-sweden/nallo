nextflow_pipeline {

    name "Test pipeline GENOMICMEDICINESWEDEN_NALLO"
    script "../main.nf"
    tag "PIPELINE"
    tag "pipeline_stub"
    tag "samplesheet_stub"

    test("Test CADD with mock resources") {
        options "-stub"

        when {
            params {
                pipelines_testdata_base_path = 'https://raw.githubusercontent.com/genomic-medicine-sweden/test-datasets/9e0f40af8fb3ab7f8a3daecaeb03a0acda1e464e/'
                input                        = "$projectDir/assets/samplesheet.csv"
                outdir                       = "$outputDir"
                // Mock inputs for CADD
                cadd_resources               = "$projectDir/assets"
                cadd_prescored_indels        = "$projectDir/docs"
                // Skip irrelevant steps
                skip_genome_assembly         = true
                skip_call_paralogs           = true
                skip_qc                      = true
                skip_sv_calling              = true
                skip_sv_annotation           = true
                skip_peddy                   = true
                skip_phasing                 = true
                skip_rank_variants           = true
                skip_repeat_calling          = true
                skip_repeat_annotation       = true
                skip_methylation_pileups     = true
            }
        }

        then {
            // stable_name: All files + folders in ${params.outdir}/ with a stable name
            def stable_name = getAllFilesFromDir(params.outdir, relative: true, includeDir: true, ignore: ['pipeline_info/*.{html,json,txt}'])
            def versions = removeNextflowVersion("$outputDir/pipeline_info/nallo_pipeline_software_mqc_versions.yml")
            assertAll(
                { assert workflow.success },
                { assert versions.containsKey('CADD') },
                { assert snapshot(
                    workflow.trace.succeeded().size(),
                    versions,
                    stable_name
                ).match() }
            )
        }
    }

    test("Test VEP with mock uncompressed cache") {
        options "-stub"

        when {
            params {
                pipelines_testdata_base_path = 'https://raw.githubusercontent.com/genomic-medicine-sweden/test-datasets/9e0f40af8fb3ab7f8a3daecaeb03a0acda1e464e/'
                input                        = "$projectDir/assets/samplesheet.csv"
                outdir                       = "$outputDir"
                // Mock inputs for VEP
                vep_cache                    = "$projectDir/assets"
                // Skip irrelevant steps
                skip_genome_assembly         = true
                skip_call_paralogs           = true
                skip_qc                      = true
                skip_sv_calling              = true
                skip_sv_annotation           = true
                skip_peddy                   = true
                skip_phasing                 = true
                skip_rank_variants           = true
                skip_repeat_calling          = true
                skip_repeat_annotation       = true
                skip_methylation_pileups     = true
            }
        }

        then {
            // stable_name: All files + folders in ${params.outdir}/ with a stable name
            def stable_name = getAllFilesFromDir(params.outdir, relative: true, includeDir: true, ignore: ['pipeline_info/*.{html,json,txt}'])
            def versions = removeNextflowVersion("$outputDir/pipeline_info/nallo_pipeline_software_mqc_versions.yml")
            assertAll(
                { assert workflow.success },
                { assert versions.containsKey('ENSEMBLVEP_SNV') },
                { assert !versions.containsKey('UNTAR_VEP_CACHE') },
                { assert snapshot(
                    workflow.trace.succeeded().size(),
                    versions,
                    stable_name
                ).match() }
            )
        }
    }

    test("Test alignment without genome assembly") {
        options "-stub"

        when {
            params {
                pipelines_testdata_base_path = 'https://raw.githubusercontent.com/genomic-medicine-sweden/test-datasets/9e0f40af8fb3ab7f8a3daecaeb03a0acda1e464e/'
                input                        = "$projectDir/assets/samplesheet.csv"
                outdir                       = "$outputDir"
                skip_genome_assembly         = true
                // Skip irrelevant steps
                skip_call_paralogs           = true
                skip_snv_calling             = true
                skip_qc                      = true
                skip_sv_calling              = true
                skip_sv_annotation           = true
                skip_peddy                   = true
                skip_snv_annotation          = true
                skip_phasing                 = true
                skip_rank_variants           = true
                skip_repeat_calling          = true
                skip_repeat_annotation       = true
                skip_methylation_pileups     = true
            }
        }

        then {
            // stable_name: All files + folders in ${params.outdir}/ with a stable name
            def stable_name = getAllFilesFromDir(params.outdir, relative: true, includeDir: true, ignore: ['pipeline_info/*.{html,json,txt}'])
            def versions = removeNextflowVersion("$outputDir/pipeline_info/nallo_pipeline_software_mqc_versions.yml")
            assertAll(
                { assert workflow.success },
                { assert !versions.containsKey('HIFIASM') },
                { assert versions.containsKey('SPLITUBAM') },
                { assert stable_name.contains('aligned_reads') },
                { assert snapshot(
                    workflow.trace.succeeded().size(),
                    versions,
                    stable_name
                ).match() }
            )
        }
    }

    test("Test alignment without genome assembly and --alignment_processes 1") {
        options "-stub"

        when {
            params {
                pipelines_testdata_base_path = 'https://raw.githubusercontent.com/genomic-medicine-sweden/test-datasets/9e0f40af8fb3ab7f8a3daecaeb03a0acda1e464e/'
                input                        = "$projectDir/assets/samplesheet.csv"
                outdir                       = "$outputDir"
                skip_genome_assembly         = true
                alignment_processes          = 1
                // Skip irrelevant steps
                skip_call_paralogs           = true
                skip_snv_calling             = true
                skip_qc                      = true
                skip_sv_calling              = true
                skip_sv_annotation           = true
                skip_peddy                   = true
                skip_snv_annotation          = true
                skip_phasing                 = true
                skip_rank_variants           = true
                skip_repeat_calling          = true
                skip_repeat_annotation       = true
                skip_methylation_pileups     = true
            }
        }

        then {
            // stable_name: All files + folders in ${params.outdir}/ with a stable name
            def stable_name = getAllFilesFromDir(params.outdir, relative: true, includeDir: true, ignore: ['pipeline_info/*.{html,json,txt}'])
            def versions = removeNextflowVersion("$outputDir/pipeline_info/nallo_pipeline_software_mqc_versions.yml")
            assertAll(
                { assert workflow.success },
                { assert !versions.containsKey('HIFIASM') },
                { assert !versions.containsKey('SPLITUBAM') },
                { assert stable_name.contains('aligned_reads') },
                { assert snapshot(
                    workflow.trace.succeeded().size(),
                    versions,
                    stable_name
                ).match() }
            )
        }
    }

    test("Test genome assembly without alignment") {
        options "-stub"

        when {
            params {
                pipelines_testdata_base_path = 'https://raw.githubusercontent.com/genomic-medicine-sweden/test-datasets/9e0f40af8fb3ab7f8a3daecaeb03a0acda1e464e/'
                input                        = "$projectDir/assets/samplesheet.csv"
                outdir                       = "$outputDir"
                skip_alignment               = true
                skip_call_paralogs           = true
                skip_snv_calling             = true
                skip_qc                      = true
                skip_sv_calling              = true
                skip_sv_annotation           = true
                skip_peddy                   = true
                skip_snv_annotation          = true
                skip_phasing                 = true
                skip_rank_variants           = true
                skip_repeat_calling          = true
                skip_repeat_annotation       = true
                skip_methylation_pileups     = true
            }
        }

        then {
            // stable_name: All files + folders in ${params.outdir}/ with a stable name
            def stable_name = getAllFilesFromDir(params.outdir, relative: true, includeDir: true, ignore: ['pipeline_info/*.{html,json,txt}'])
            def versions = removeNextflowVersion("$outputDir/pipeline_info/nallo_pipeline_software_mqc_versions.yml")
            assertAll(
                { assert workflow.success },
                { assert versions.containsKey('HIFIASM') },
                { assert !versions.containsKey('SPLITUBAM') },
                { assert !stable_name.contains('aligned_reads') },
                { assert snapshot(
                    workflow.trace.succeeded().size(),
                    versions,
                    stable_name
                ).match() }
            )
        }
    }

}
