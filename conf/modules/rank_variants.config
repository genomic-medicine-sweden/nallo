/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Config file for defining DSL2 per module options and publishing paths
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Available keys to override module options:
        ext.args            = Additional arguments appended to command in module.
        ext.args2           = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3           = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix          = File name prefix for output files.
        ext.when            = Conditional clause
----------------------------------------------------------------------------------------
*/

//
// Score and rank SNVs
//

process {

    withName: '.*:RANK_VARIANTS_SNV:GENMOD_ANNOTATE' {
        ext.prefix = { "${meta.id}_snv_genmod_annotate" }
        ext.args = { [
            '--annotate_regions',
            '--genome-build 38',
            '--temp_dir ./'
            ].join(' ') }
    }

    withName: '.*:RANK_VARIANTS_SNV:GENMOD_MODELS' {
        ext.prefix = { "${meta.id}_snv_genmod_models" }
        ext.args = "--whole_gene --temp_dir ./"
    }

    withName: '.*:RANK_VARIANTS_SNV:GENMOD_SCORE' {
        ext.prefix = { "${meta.id}_snv_genmod_score" }
        ext.args = "--rank_results"
    }

    withName: '.*:RANK_VARIANTS_SNV:GENMOD_COMPOUND' {
        ext.prefix = { "${meta.id}_snv_genmod_compound" }
        ext.args = "--temp_dir ./"
    }

    withName: '.*:RANK_VARIANTS_SNV:BCFTOOLS_SORT' {
        ext.when = false
    }

    withName: '.*:RANK_VARIANTS_SNV:TABIX_BGZIP' {
        ext.prefix = { "${meta.id}_snv_ranked" }
        publishDir = [
            path: { "${params.outdir}/ranked_variants" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: '.*:RANK_VARIANTS_SNV:TABIX_TABIX' {
        publishDir = [
            path: { "${params.outdir}/ranked_variants" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
}
