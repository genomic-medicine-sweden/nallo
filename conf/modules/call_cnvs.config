/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Config file for defining DSL2 per module options and publishing paths
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Available keys to override module options:
        ext.args   = Additional arguments appended to command in module.
        ext.args2  = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3  = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix = File name prefix for output files.
----------------------------------------------------------------------------------------
*/

process {

    /*
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Call CNVs
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    */

    withName: '.*:CALL_CNVS:HIFICNV' {
        ext.prefix = { "${meta.id}_hificnv" }
        publishDir = [
            path: { "${params.outdir}/visualization_tracks/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.endsWith('.bw') || filename.endsWith('.bedgraph') ? filename : null }
        ]
    }

    withName: '.*:CALL_CNVS:ADD_FOUND_IN_TAG' {
        ext.prefix = { "${meta.id}_cnvs" }
        ext.args = '--no-version'
        ext.args2 = [
            '--output-type z',
            '--write-index=tbi',
            '--no-version'
        ].join(' ')
        publishDir = [
            path: { "${params.outdir}/svs/single_sample/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: '.*:CALL_CNVS:SVDB_MERGE' {
        ext.prefix = { "${meta.id}_cnvs_merged" }
        ext.args = [
            '--bnd_distance 10000',
            '--overlap .5'
        ].join(' ')
        publishDir = [
            path: { "${params.outdir}/svs/multi_sample/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: '.*:CALL_CNVS:TABIX_TABIX' {
        publishDir = [
            path: { "${params.outdir}/svs/multi_sample/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
}
