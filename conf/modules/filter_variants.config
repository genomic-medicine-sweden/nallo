/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Config file for defining DSL2 per module options and publishing paths
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Available keys to override module options:
        ext.args   = Additional arguments appended to command in module.
        ext.args2  = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3  = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix = File name prefix for output files.
----------------------------------------------------------------------------------------
*/

process {

    /*
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Filter variants
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    */

    withName: '.*:FILTER_VARIANTS_SNV:.*' {
        publishDir = [
            enabled: false,
        ]
    }

    withName: '.*:FILTER_VARIANTS_SNVS:ENSEMBLVEP_FILTERVEP' {
        ext.args   = { "--filter \"HGNC_ID in ${feature_file}\"" }
        publishDir = [
            enabled: false,
        ]
    }

    withName: '.*:FILTER_VARIANTS_SVS:ENSEMBLVEP_FILTERVEP' {
        ext.args   = { "--filter \"HGNC_ID in ${feature_file}\"" }
        publishDir = [
            enabled: false,
        ]
    }

    withName: '.*:FILTER_VARIANTS_SNVS:BCFTOOLS_VIEW' {
        ext.prefix = { params.skip_snv_annotation ? "${meta.id}_snvs_filtered" : (params.skip_rank_variants ? "${meta.id}_snvs_annotated_filtered" : "${meta.id}_snvs_annotated_ranked_filtered") }
        ext.args   = { [
            '--output-type z',
            '--write-index=tbi',
            "${params.filter_snvs_expression}"
        ].join(" ") }
        publishDir = [
            path: { "${params.outdir}/snvs/family/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: '.*:FILTER_VARIANTS_SVS:BCFTOOLS_VIEW' {
        ext.prefix = {
            def parts = []
            parts << "${meta.id}"
            parts << (params.skip_cnv_calling ? 'svs_merged' : 'svs_cnvs_merged')
            if (!params.skip_sv_annotation) parts << 'annotated'
            if (!params.skip_rank_variants) parts << 'ranked'
            parts << 'filtered'
            return parts.join('_')
        }
        ext.args   = { [
            '--output-type z',
            '--write-index=tbi',
            "${params.filter_svs_expression}"
        ].join(" ") }
                publishDir = [
            path: { "${params.outdir}/svs/family/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

}
