/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Config file for defining DSL2 per module options and publishing paths
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Available keys to override module options:
        ext.args   = Additional arguments appended to command in module.
        ext.args2  = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3  = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix = File name prefix for output files.
----------------------------------------------------------------------------------------
*/

process {

    /*
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Phasing
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    */

    withName: '.*:PHASING:.*' {
        publishDir = [
            enabled: false,
        ]
    }

    withName: '.*:PHASING:HIPHASE' {
        ext.args = { [
            '--ignore-read-groups',
            "--stats-file ${meta.id}_phased.stats.tsv",
            "--blocks-file ${meta.id}_phased.blocks.tsv",
            "--summary-file ${meta.id}_phased.summary.tsv"
        ].join(' ') }
        publishDir = [
            path: { "${params.outdir}/" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : ((filename.endsWith('bam') || filename.endsWith('bai')) ? "aligned_reads/${meta.id}/${filename}" : "phased_variants/${meta.id}/${filename}" ) }
        ]
    }

    withName: '.*:PHASING:LONGPHASE_PHASE' {
        ext.prefix = { "${meta.id}_phased" }
        ext.args = [
            params.preset.equals('ONT_R10') ? "--ont" : "--pb",
            '--indels'
        ].join(' ')
        publishDir = [
            path: { "${params.outdir}/phased_variants/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: '.*:PHASING:TABIX_LONGPHASE_PHASE' {
        publishDir = [
            path: { "${params.outdir}/phased_variants/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }


    withName: '.*:PHASING:LONGPHASE_HAPLOTAG' {
        ext.prefix = { "${meta.id}_haplotagged" }
        publishDir = [
            path: { "${params.outdir}/aligned_reads/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: '.*:PHASING:WHATSHAP_PHASE' {
        ext.prefix = { "${meta.id}_phased" }
        ext.args = [
            '--ignore-read-groups',
            '--indels',
            '--use-supplementary'
        ].join(' ')
        publishDir = [
            path: { "${params.outdir}/phased_variants/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: '.*:PHASING:WHATSHAP_STATS' {
        ext.prefix = { "${meta.id}_stats" }
        publishDir = [
            path: { "${params.outdir}/qc/phasing_stats/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: '.*:PHASING:WHATSHAP_HAPLOTAG' {
        ext.prefix = { "${meta.id}_haplotagged" }
        ext.args = [
            '--ignore-read-groups',
            '--tag-supplementary'
        ].join(' ')
        publishDir = [
            path: { "${params.outdir}/aligned_reads/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: '.*:PHASING:SAMTOOLS_INDEX_WHATSHAP|.*:PHASING:SAMTOOLS_INDEX_LONGPHASE' {
        publishDir = [
            path: { "${params.outdir}/aligned_reads/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: '.*:PHASING:CRAMINO_PHASED' {
        ext.args = [
            '--karyotype',
            '--phased'
        ].join(' ')
        ext.prefix = { "${meta.id}_cramino_aligned_phased" }
        publishDir = [
            path: { "${params.outdir}/qc/cramino/phased/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

}
