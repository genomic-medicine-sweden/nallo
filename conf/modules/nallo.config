/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Config file for defining DSL2 per module options and publishing paths
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Available keys to override module options:
        ext.args   = Additional arguments appended to command in module.
        ext.args2  = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3  = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix = File name prefix for output files.
----------------------------------------------------------------------------------------
*/

process {

    publishDir = [
        path: { "${params.outdir}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
        mode: params.publish_dir_mode,
        saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
    ]

    /*
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Process in main workflow
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    */

    withName: '.*:NALLO:BCFTOOLS_STATS' {
        publishDir = [
            path: { "${params.outdir}/qc/bcftools_stats/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: '.*:NALLO:BCFTOOLS_CONCAT' {
        ext.prefix = { "${meta.id}_concat" }
        ext.args = { [
            '--allow-overlaps',
            '--output-type u'
        ].join(' ') }
        publishDir = [
            enabled: false
        ]
    }
    // Output family SNVs from here
    withName: '.*:NALLO:BCFTOOLS_SORT' {
        ext.prefix = {
            def name = []
            name << "${meta.id}_snvs"
            if (!params.skip_snv_annotation) name << "annotated"
            if (!params.skip_rank_variants) name << "ranked"
            if (meta?.containsKey('set')) name << "${meta.set}"
            return name.join('_')
        }
        ext.args = { [
            '--output-type z',
            '--write-index=tbi'
        ].join(' ') }
        publishDir = [
            path: { "${params.outdir}/snvs/family/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    // Output family SVs from here
    withName: '.*:NALLO:BCFTOOLS_VIEW' {
        ext.prefix = {
            def name = []
            name << "${meta.id}"
            name << (params.skip_cnv_calling ? 'svs_merged' : 'svs_cnvs_merged')
            if (!params.skip_sv_annotation) name << "annotated"
            if (!params.skip_rank_variants) name << "ranked"
            if (meta?.containsKey('set')) name << "${meta.set}"
            return name.join('_')
        }
        ext.args = { [
            '--output-type z',
            '--write-index=tbi'
        ].join(' ') }
        publishDir = [
            path: { "${params.outdir}/svs/family/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: '.*:NALLO:PEDDY' {
        ext.args = { !params.peddy_sites ? '--sites hg38' : '' }
        publishDir = [
            path: { "${params.outdir}/qc/peddy/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: '.*:NALLO:SAMPLESHEET_PED' {
        publishDir = [
            enabled: false
        ]
    }

    withName: '.*:NALLO:SOMALIER_PED_FAMILY' {
        publishDir = [
            path: { "${params.outdir}/pedigree/family/" },
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        ]
    }

    withName: '.*:NALLO:BUILD_INTERVALS' {
        publishDir = [
            enabled: false
        ]
    }

    withName: '.*:NALLO:SPLITUBAM' {
        ext.args = { "--split ${params.alignment_processes}" }
        publishDir = [
            enabled: false
        ]
    }

    withName: '.*:NALLO:STRANGER' {
        ext.prefix = { "${meta.id}_repeats_annotated" }
        ext.args   = '--trgt'
        publishDir = [
            path: { "${params.outdir}/repeats/family/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: '.*:NALLO:MINIMAP2_ALIGN' {
        // Samtools will not sort supplementary reads properly, to snapshot the md5sum
        // they must be input in the same order and can therefore not be named the same
        ext.prefix = { meta.n_files > 1 ? "${reads}" : "${meta.id}_aligned}" }
        ext.args = { [
            "-y",
            "-x ${params.minimap2_read_mapping_preset}",
            "--secondary=no",
            "-Y",
            "-R @RG\\\\tID:${meta.id}\\\\tSM:${meta.id}",
            "--MD" // for Sniffles1
        ].join(' ') }
        ext.args3 = { [
            '-x HP,PS', // phasing
            '-x AS,CC,CG,CP,H1,H2,HI,H0,IH,MC,MD,MQ,NM,SA,TS',
            '--no-RG' // read group information
        ].join(' ') }
        ext.args4 = '-T \\*'
        publishDir = [
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/aligned_reads/${meta.id}" },
            // A BAM file is only published from here if no merging is required (a sample with one input file), and if phasing is off
            saveAs: { filename ->
                filename.equals('versions.yml') || !params.skip_phasing || params.alignment_output_format == 'cram'|| meta.n_files > 1 ? null : filename
            }
        ]
    }

    withName: '.*:NALLO:SAMTOOLS_MERGE' {
        ext.args = '--write-index'
        ext.prefix = { "${meta.id}_aligned" }
        publishDir = [
            path: { "${params.outdir}/aligned_reads/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') || !params.skip_phasing || params.alignment_output_format == 'cram' ? null : filename }
        ]
    }

    withName: '.*:NALLO:SAMTOOLS_CONVERT' {
        ext.prefix = { "${meta.id}_aligned" }
        ext.args = '--write-index'
        publishDir = [
            path: { "${params.outdir}/aligned_reads/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') || !params.skip_phasing ? null : filename }
        ]
    }

    withName: '.*:NALLO:SVDB_MERGE_SVS_CNVS' {
        ext.prefix = { "${meta.id}_svdb" }
        publishDir = [
            enabled: false
        ]
    }

    /*
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Summary
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    */

    withName: CUSTOM_DUMPSOFTWAREVERSIONS {
        publishDir = [
            path: { "${params.outdir}/pipeline_info" },
            mode: params.publish_dir_mode,
            pattern: '*_versions.yml'
        ]
    }
}
