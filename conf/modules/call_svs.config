/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Config file for defining DSL2 per module options and publishing paths
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Available keys to override module options:
        ext.args   = Additional arguments appended to command in module.
        ext.args2  = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3  = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix = File name prefix for output files.
----------------------------------------------------------------------------------------
*/

process {

    /*
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Call SVs
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    */

    withName: '.*:CALL_SVS:.*' {
        publishDir = [
            enabled: false,
        ]
    }

    withName: '.*:CALL_SVS:ADD_FOUND_IN_TAG' {
        ext.prefix = { "${meta.id}_${meta.sv_caller}_found_in" }
        ext.args = '--no-version'

        ext.args2 = [
            '--output-type z', // SVDB merge expects VCF
            '--write-index=tbi',
            '--no-version'
        ].join(' ')
    }

    withName: '.*:CALL_SVS:BCFTOOLS_VIEW' {
        ext.prefix = { "${meta.id}_${meta.sv_caller}_filtered" }
        ext.args = [
            '--output-type z',
            '--write-index=tbi'
        ].join(' ')
    }

    withName: '.*:CALL_SVS:BCFTOOLS_QUERY' {
        ext.args = '--list-samples'
    }

    withName: '.*:CALL_SVS:BCFTOOLS_SORT' {
        ext.args = [
            '--output-type z',
            '--write-index=tbi'
        ].join(' ')
    }

    withName: '.*:CALL_SVS:CREATE_SAMPLES_FILE' {
        ext.prefix = { "${meta.id}_samples_file" }
    }

    withName: '.*:CALL_SVS:HIFICNV' {
        ext.prefix = { "${meta.id}_hificnv" }
        publishDir = [
            path: { "${params.outdir}/visualization_tracks/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.endsWith('.bw') || filename.endsWith('.bedgraph') ? filename : null }
        ]
    }

    withName: '.*:CALL_SVS:SAWFISH_DISCOVER' {
        ext.prefix = { "${meta.id}_sawfish_discover" }
    }

    withName: '.*:CALL_SVS:SAWFISH_JOINTCALL' {
        ext.prefix = { "${meta.id}_sawfish_svs" }
        // While SVDB is used to output per family and caller VCFs when publish_unannotated_family_svs is true,
        // if we're not force joint-calling single samples, we need to output per family VCFs for sawfish here instead
        publishDir = [
            path: { "${params.outdir}/svs/family/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename ->
                if(
                    !params.force_sawfish_joint_call_single_samples &&
                    params.publish_unannotated_family_svs &&
                    filename.contains("_genotyped.sv")
                ) {
                    // Rename to match SVDB output naming
                    return filename.replace("${meta.id}_sawfish_svs/", "").replace("_genotyped.sv", "")
                } else {
                    return null
                }
            }
        ]
    }

    withName: '.*:CALL_SVS:SNIFFLES' {
        ext.prefix = { "${meta.id}_sniffles_for_reheader" }
        ext.args = [
            '--cluster',
            '--genotype',
            '--ignore_sd',
            '--report_str',
            '-s 3',
            '-r 500',
            '-l 50',
            '--min_het_af 0'
        ].join(' ')
    }

    withName: '.*:CALL_SVS:SVDB_MERGE_BY_CALLER' {
        tag = { "${meta.id}_${meta.sv_caller}" }
        ext.prefix = { "${meta.id}_${meta.sv_caller}_svs" }
        ext.args = { [
            meta.sv_caller == 'hificnv' ? '--bnd_distance 10000' : '--bnd_distance 1000',
            '--overlap .5'
        ].join(' ') }
        ext.args2  = [
            '--output-type z',
            '--write-index=tbi'
        ].join(' ')
        publishDir = [
            path: { "${params.outdir}/svs/family/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename ->
                if (params.publish_unannotated_family_svs && !filename.equals('versions.yml')) {
                    return filename
                } else {
                    return null
                }
            }
        ]
    }

    withName: '.*:CALL_SVS:SVDB_MERGE_BY_FAMILY' {
        ext.prefix = { "${meta.id}_svdb_merge_by_family" }
        ext.args2 = [
            '--output-type z',
            '--write-index=tbi'
        ].join(' ')
    }

    withName: '.*:CALL_SVS:TABIX_SEVERUS' {
        ext.prefix = { "${meta.id}_tabix_severus" }
    }

    withName: '.*:CALL_SVS:TABIX_HIFICNV' {
        ext.prefix = { "${meta.id}_tabix_hificnv" }
    }

    withName: '.*:CALL_SVS:BCFTOOLS_REHEADER' {
        ext.prefix = { "${meta.id}_${meta.sv_caller}_svs" }
        ext.args2 = [
            '--output-type z',
            '--write-index=tbi'
        ].join(' ')
    }
}
