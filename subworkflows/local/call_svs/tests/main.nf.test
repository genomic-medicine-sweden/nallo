nextflow_workflow {

    name "Test Workflow CALL_SVS"
    script "../main.nf"
    config "./nextflow.config"
    workflow "CALL_SVS"

    setup {
            run("GUNZIP") {
                script "../../../../modules/nf-core/gunzip/main.nf"
                process {
                    """
                    input[0] = [
                        [ id:'test' ],
                        file(params.pipelines_testdata_base_path + 'nallo/reference/hg38.test.fa.gz', checkIfExists: true)
                    ]
                    """
                }

            }

            run("SAMTOOLS_FAIDX") {
                script "../../../../modules/nf-core/samtools/faidx/main.nf"
                process {
                    """
                    input[0] = GUNZIP.out.gunzip
                    input[1] = [[],[]]
                    """
                }

            }
    }

    test("1 sample - [bam, bai], fasta, fai, []") {

        when {
            workflow {
                """
                input[0] = [
                    [ id:'test', single_end:false, project: 'project' ], // meta map
                    file(params.pipelines_testdata_base_path + 'nallo/testdata/HG002_PacBio_Revio.bam', checkIfExists: true),
                    file(params.pipelines_testdata_base_path + 'nallo/testdata/HG002_PacBio_Revio.bam.bai', checkIfExists: true)
                ]
                input[1] = GUNZIP.out.gunzip
                input[2] = SAMTOOLS_FAIDX.out.fai
                input[3] = [[],[]]
                """
            }
        }

        then {
            assertAll(
                { assert workflow.success },
                { assert workflow.out.ch_sv_calls_tbi.get(0).get(1).endsWith("tbi") },
                { assert workflow.out.ch_multisample_tbi.get(0).get(1).endsWith("tbi") },
                { assert snapshot(
                    path(workflow.out.ch_sv_calls_vcf.get(0).get(1)).linesGzip[5..239],
                    path(workflow.out.ch_sv_calls_vcf.get(0).get(1)).vcf.variantsMD5,
                    path(workflow.out.ch_multisample_vcf.get(0).get(1)).linesGzip[5..239],
                    path(workflow.out.ch_multisample_vcf.get(0).get(1)).vcf.variantsMD5,
                    workflow.out.versions,
                ).match() }
            )
        }

    }

    test("1 sample - [bam, bai], fasta, fai, bed") {

        when {
            workflow {
                """
                input[0] = [
                    [ id:'test', single_end:false, project: 'project' ], // meta map
                    file(params.pipelines_testdata_base_path + 'nallo/testdata/HG002_PacBio_Revio.bam', checkIfExists: true),
                    file(params.pipelines_testdata_base_path + 'nallo/testdata/HG002_PacBio_Revio.bam.bai', checkIfExists: true)
                ]
                input[1] = GUNZIP.out.gunzip
                input[2] = SAMTOOLS_FAIDX.out.fai
                input[3] = [
                    [ id:'trf' ],
                    file('https://github.com/fritzsedlazeck/Sniffles/raw/master/annotations/human_GRCh38_no_alt_analysis_set.trf.bed', checkIfExists: true)
                ]
                """
            }
        }

        then {
            assertAll(
                { assert workflow.success },
                { assert workflow.out.ch_sv_calls_tbi.get(0).get(1).endsWith("tbi") },
                { assert workflow.out.ch_multisample_tbi.get(0).get(1).endsWith("tbi") },
                { assert snapshot(
                    path(workflow.out.ch_sv_calls_vcf.get(0).get(1)).linesGzip[5..239],
                    path(workflow.out.ch_sv_calls_vcf.get(0).get(1)).vcf.variantsMD5,
                    path(workflow.out.ch_multisample_vcf.get(0).get(1)).linesGzip[5..239],
                    path(workflow.out.ch_multisample_vcf.get(0).get(1)).vcf.variantsMD5,
                    workflow.out.versions,
                ).match() }
            )
        }

    }

    test("2 samples - [bam, bai], fasta, fai, []") {

        when {
            workflow {
                """
                input[0] = Channel.of(
                    [
                        [ id:'test_1', single_end:false, project: 'project' ], // meta map
                        file(params.pipelines_testdata_base_path + 'nallo/testdata/HG002_PacBio_Revio.bam', checkIfExists: true),
                        file(params.pipelines_testdata_base_path + 'nallo/testdata/HG002_PacBio_Revio.bam.bai', checkIfExists: true)
                    ],
                    [
                        [ id:'test_2', single_end:false, project: 'project' ], // meta map
                        file(params.pipelines_testdata_base_path + 'nallo/testdata/HG002_ONT.bam', checkIfExists: true),
                        file(params.pipelines_testdata_base_path + 'nallo/testdata/HG002_ONT.bam.bai', checkIfExists: true)
                    ]
                )
                input[1] = GUNZIP.out.gunzip
                input[2] = SAMTOOLS_FAIDX.out.fai
                input[3] = [[],[]]
                """
            }
        }

        then {
            assertAll(
                { assert workflow.success },
                { assert workflow.out.ch_sv_calls_tbi.get(0).get(1).endsWith("tbi") },
                { assert workflow.out.ch_sv_calls_tbi.get(1).get(1).endsWith("tbi") },
                { assert workflow.out.ch_multisample_tbi.get(0).get(1).endsWith("tbi") },
                { assert snapshot(
                    path(workflow.out.ch_sv_calls_vcf.get(0).get(1)).linesGzip[5..239],
                    workflow.out.ch_sv_calls_vcf.collect { file(it[1]).name }.sort().toString(), // don't know the order of the output VCFs
                    path(workflow.out.ch_sv_calls_vcf.get(1).get(1)).linesGzip[5..239],
                    path(workflow.out.ch_multisample_vcf.get(0).get(1)).linesGzip[5..239],
                    workflow.out.versions,
                ).match() }
            )
        }

    }

    test("1 sample - [bam, bai], fasta, fai, [] -stub") {

        options "-stub"

        when {
            workflow {
                """
                input[0] = [
                    [ id:'test', single_end:false, project: 'project' ], // meta map
                    file(params.pipelines_testdata_base_path + 'nallo/testdata/HG002_PacBio_Revio.bam', checkIfExists: true),
                    file(params.pipelines_testdata_base_path + 'nallo/testdata/HG002_PacBio_Revio.bam.bai', checkIfExists: true)
                ]
                input[1] = GUNZIP.out.gunzip
                input[2] = SAMTOOLS_FAIDX.out.fai
                input[3] = [[],[]]
                """
            }
        }

        then {
            assertAll(
                { assert workflow.success },
                { assert snapshot(workflow.out).match() }
            )
        }

    }

    test("1 sample - [bam, bai], fasta, fai, bed -stub") {

        options "-stub"

        when {
            workflow {
                """
                input[0] = [
                    [ id:'test', single_end:false, project: 'project' ], // meta map
                    file(params.pipelines_testdata_base_path + 'nallo/testdata/HG002_PacBio_Revio.bam', checkIfExists: true),
                    file(params.pipelines_testdata_base_path + 'nallo/testdata/HG002_PacBio_Revio.bam.bai', checkIfExists: true)
                ]
                input[1] = GUNZIP.out.gunzip
                input[2] = SAMTOOLS_FAIDX.out.fai
                input[3] = [
                    [ id:'trf' ],
                    file('https://github.com/fritzsedlazeck/Sniffles/raw/master/annotations/human_GRCh38_no_alt_analysis_set.trf.bed', checkIfExists: true)
                ]
                """
            }
        }

        then {
            assertAll(
                { assert workflow.success },
                { assert snapshot(workflow.out).match() }
            )
        }

    }

    test("2 samples - [bam, bai], fasta, fai, [] -stub") {

        options "-stub"

        when {
            workflow {
                """
                input[0] = Channel.of(
                    [
                        [ id:'test_1', single_end:false, project: 'project' ], // meta map
                        file(params.pipelines_testdata_base_path + 'nallo/testdata/HG002_PacBio_Revio.bam', checkIfExists: true),
                        file(params.pipelines_testdata_base_path + 'nallo/testdata/HG002_PacBio_Revio.bam.bai', checkIfExists: true)
                    ],
                    [
                        [ id:'test_2', single_end:false, project: 'project' ], // meta map
                        file(params.pipelines_testdata_base_path + 'nallo/testdata/HG002_ONT.bam', checkIfExists: true),
                        file(params.pipelines_testdata_base_path + 'nallo/testdata/HG002_ONT.bam.bai', checkIfExists: true)
                    ]
                )
                input[1] = GUNZIP.out.gunzip
                input[2] = SAMTOOLS_FAIDX.out.fai
                input[3] = [[],[]]
                """
            }
        }

        then {
            assertAll(
                { assert workflow.success },
                { assert snapshot(
                    workflow.out.ch_sv_calls_vcf.collect { file(it[1]).name }.sort().toString(), // don't know the order of the output VCFs
                    workflow.out.ch_sv_calls_tbi,
                    workflow.out.ch_multisample_vcf,
                    workflow.out.ch_multisample_tbi,
                    workflow.out.versions,
                ).match() }
            )
        }

    }
}
