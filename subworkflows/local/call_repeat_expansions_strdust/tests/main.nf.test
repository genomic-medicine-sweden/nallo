nextflow_workflow {

    name "Test Subworkflow CALL_REPEAT_EXPANSIONS_STRDUST"
    script "../main.nf"
    workflow "CALL_REPEAT_EXPANSIONS_STRDUST"

    setup {
            run("GUNZIP") {
                script "../../../../modules/nf-core/gunzip/main.nf"
                process {
                    """
                    input[0] = [
                        [ id:'test' ],
                        file(params.pipelines_testdata_base_path + 'reference/hg38.test.fa.gz', checkIfExists: true)
                    ]
                    """
                }

            }

            run("SAMTOOLS_FAIDX") {
                script "../../../../modules/nf-core/samtools/faidx/main.nf"
                process {
                    """
                    input[0] = GUNZIP.out.gunzip
                    input[1] = [[],[]]
                    """
                }

            }
    }

    test("[bam, bai], fasta, fai, bed - STRdust") {

        when {
            workflow {
                """
                input[0] = Channel.of([
                    [ id:'test', single_end:false, family_id: 'family', sex: 1 ], // meta map
                    file(params.pipelines_testdata_base_path + 'testdata/HG002_ONT.bam', checkIfExists: true),
                    file(params.pipelines_testdata_base_path + 'testdata/HG002_ONT.bam.bai', checkIfExists: true)
                ])
                input[1] = GUNZIP.out.gunzip
                input[2] = SAMTOOLS_FAIDX.out.fai
                input[3] = Channel.of([
                    [ id: 'pathogenic_repeats' ],
                    file(params.pipelines_testdata_base_path + 'reference/pathogenic_repeats.hg38.bed')
                ])
                """
            }
        }

        then {
            assertAll(
                { assert workflow.success },
                { assert snapshot(
                    path(workflow.out.sample_vcf.get(0).get(1)).vcf.summary,
                    path(workflow.out.family_vcf.get(0).get(1)).vcf.summary,
                    workflow.out.versions,
                ).match() }
            )
        }
    }

    test("[bam, bai], fasta, fai, bed - STRdust - stub") {

        options '-stub'

        when {
            workflow {
                """
                input[0] = Channel.of([
                    [ id:'test', single_end:false, family_id: 'family', sex: 1 ], // meta map
                    file(params.pipelines_testdata_base_path + 'testdata/HG002_ONT.bam', checkIfExists: true),
                    file(params.pipelines_testdata_base_path + 'testdata/HG002_ONT.bam.bai', checkIfExists: true)
                ])
                input[1] = GUNZIP.out.gunzip
                input[2] = SAMTOOLS_FAIDX.out.fai
                input[3] = Channel.of([
                    [ id: 'pathogenic_repeats' ],
                    file(params.pipelines_testdata_base_path + 'reference/pathogenic_repeats.hg38.bed')
                ])
                """
            }
        }
        then {
            assertAll(
                { assert workflow.success },
                { assert snapshot(workflow.out).match() }
            )
        }
    }
}
