nextflow_workflow {

    name "Test Workflow ALIGN_ASSEMBLIES"
    script "../main.nf"
    workflow "ALIGN_ASSEMBLIES"
    config "./nextflow.config"

    setup {
        run("HIFIASM") {
            script "../../../../modules/nf-core/hifiasm/main.nf"
            process {
                """
                input[0] = Channel.of([
                    [ id:'hg38' ],
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/pacbio/fastq/test_hifi.fastq.gz', checkIfExists: true),
                    []
                ])
                input[1] = [[],[],[]]
                input[2] = [[],[],[]]
                """
            }
        }

        run("GFASTATS") {
            script "../../../../modules/nf-core/gfastats/main.nf"
            process {
                """
                input[0] = HIFIASM.out.paternal_contigs
                    .map { meta, fasta -> [ meta + [ 'haplotype': 1 ], fasta ] }
                    .mix(
                        HIFIASM.out.maternal_contigs
                        .map { meta, fasta -> [ meta + [ 'haplotype': 2 ], fasta ] }
                    )
                input[1] = 'fasta'
                input[2] = ''
                input[3] = ''
                input[4] = [[],[]]
                input[5] = [[],[]]
                input[6] = [[],[]]
                input[7] = [[],[]]
                """
            }
        }

    }

    test("bam") {

        when {
            workflow {
                """
                input[0] = GFASTATS.out.assembly
                input[1] = Channel.of([
                    [ id: 'genome' ],
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.fasta', checkIfExists: true)
                ])
                """
            }
        }

        then {
            assertAll(
                { assert workflow.success },
                { assert snapshot(
                    workflow.out.versions,
                    bam(workflow.out.bam.get(0).get(1)).getReadsMD5(),
                    file(workflow.out.bai.get(0).get(1)).name
                ).match() }
            )
        }
    }

    test("bam - stub") {
        options "-stub"
        when {
            workflow {
                """
                input[0] = GFASTATS.out.assembly
                input[1] = Channel.of([
                    [ id: 'genome' ],
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.fasta', checkIfExists: true)
                ])
                """
            }
        }

        then {
            assertAll(
                { assert workflow.success },
                { assert snapshot(workflow.out).match() }
            )
        }

    }
}
