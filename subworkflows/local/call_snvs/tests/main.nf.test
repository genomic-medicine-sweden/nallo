nextflow_workflow {

    name "Test Workflow CALL_SNVS"
    script "../main.nf"
    config "./nextflow.config"
    workflow "CALL_SNVS"

    test("1 sample - no bed, fasta, fai, [], deepvariant") {

        when {
            workflow {
                """
                input[0] = Channel.of([
                    [ id:'test', single_end:false, num_intervals:1 ], // meta map
                    file(params.modules_testdata_base_path + '/genomics/homo_sapiens/illumina/bam/test.paired_end.sorted.bam', checkIfExists: true),
                    file(params.modules_testdata_base_path + '/genomics/homo_sapiens/illumina/bam/test.paired_end.sorted.bam.bai', checkIfExists: true),
                    []
                ])
                input[1] = [
                    [ id:'genome'],
                    file(params.modules_testdata_base_path + '/genomics/homo_sapiens/genome/genome.fasta', checkIfExists: true)
                ]
                input[2] = [
                    [ id:'genome'],
                    file(params.modules_testdata_base_path + '/genomics/homo_sapiens/genome/genome.fasta.fai', checkIfExists: true)
                ]
                input[3] = [[],[]]
                input[4] = "deepvariant"
                """
            }
        }

        then {
            assertAll(
                { assert workflow.success },
                { assert snapshot(workflow.out).match() }
            )
        }

    }

    test("1 sample - 2 bed, fasta, fai, [], deepvariant") {

        when {
            workflow {
                """
                input[0] = Channel.of(
                    [
                        [ id:'test', single_end:false, num_intervals:2 ], // meta map
                        file(params.modules_testdata_base_path + '/genomics/homo_sapiens/illumina/bam/test.paired_end.sorted.bam', checkIfExists: true),
                        file(params.modules_testdata_base_path + '/genomics/homo_sapiens/illumina/bam/test.paired_end.sorted.bam.bai', checkIfExists: true),
                        file(params.modules_testdata_base_path + '/genomics/homo_sapiens/genome/genome.bed', checkIfExists: true)
                    ],
                    [
                        [ id:'test', single_end:false, num_intervals:2 ], // meta map
                        file(params.modules_testdata_base_path + '/genomics/homo_sapiens/illumina/bam/test.paired_end.sorted.bam', checkIfExists: true),
                        file(params.modules_testdata_base_path + '/genomics/homo_sapiens/illumina/bam/test.paired_end.sorted.bam.bai', checkIfExists: true),
                        file(params.modules_testdata_base_path + '/genomics/homo_sapiens/genome/genome.multi_intervals.bed', checkIfExists: true)
                    ]
                )
                input[1] = [
                    [ id:'genome'],
                    file(params.modules_testdata_base_path + '/genomics/homo_sapiens/genome/genome.fasta', checkIfExists: true)
                ]
                input[2] = [
                    [ id:'genome'],
                    file(params.modules_testdata_base_path + '/genomics/homo_sapiens/genome/genome.fasta.fai', checkIfExists: true)
                ]
                input[3] = [[],[]]
                input[4] = "deepvariant"
                """
            }
        }

        then {
            assertAll(
                { assert workflow.success },
                { assert snapshot(workflow.out).match()
                }
            )
        }

    }

    test("2 samples - 2 bed, fasta, fai, par_bed, deepvariant") {

        when {
            workflow {
                """
                input[0] = Channel.of(
                    [
                        [ id:'test', single_end:false, num_intervals:2 ], // meta map
                        file(params.modules_testdata_base_path + '/genomics/homo_sapiens/illumina/bam/test.paired_end.sorted.bam', checkIfExists: true),
                        file(params.modules_testdata_base_path + '/genomics/homo_sapiens/illumina/bam/test.paired_end.sorted.bam.bai', checkIfExists: true),
                        file(params.modules_testdata_base_path + '/genomics/homo_sapiens/genome/genome.bed', checkIfExists: true)
                    ],
                    [
                        [ id:'test', single_end:false, num_intervals:2 ], // meta map
                        file(params.modules_testdata_base_path + '/genomics/homo_sapiens/illumina/bam/test.paired_end.sorted.bam', checkIfExists: true),
                        file(params.modules_testdata_base_path + '/genomics/homo_sapiens/illumina/bam/test.paired_end.sorted.bam.bai', checkIfExists: true),
                        file(params.modules_testdata_base_path + '/genomics/homo_sapiens/genome/genome.multi_intervals.bed', checkIfExists: true)
                    ],
                    [
                        [ id:'test2', single_end:false, num_intervals:2 ], // meta map
                        file(params.modules_testdata_base_path + '/genomics/homo_sapiens/illumina/bam/test.paired_end.sorted.bam', checkIfExists: true),
                        file(params.modules_testdata_base_path + '/genomics/homo_sapiens/illumina/bam/test.paired_end.sorted.bam.bai', checkIfExists: true),
                        file(params.modules_testdata_base_path + '/genomics/homo_sapiens/genome/genome.bed', checkIfExists: true)
                    ],
                    [
                        [ id:'test2', single_end:false, num_intervals:2 ], // meta map
                        file(params.modules_testdata_base_path + '/genomics/homo_sapiens/illumina/bam/test.paired_end.sorted.bam', checkIfExists: true),
                        file(params.modules_testdata_base_path + '/genomics/homo_sapiens/illumina/bam/test.paired_end.sorted.bam.bai', checkIfExists: true),
                        file(params.modules_testdata_base_path + '/genomics/homo_sapiens/genome/genome.multi_intervals.bed', checkIfExists: true)
                    ]
                )
                input[1] = [
                    [ id:'genome'],
                    file(params.modules_testdata_base_path + '/genomics/homo_sapiens/genome/genome.fasta', checkIfExists: true)
                ]
                input[2] = [
                    [ id:'genome'],
                    file(params.modules_testdata_base_path + '/genomics/homo_sapiens/genome/genome.fasta.fai', checkIfExists: true)
                ]
                input[3] = [
                    [ id:'par_bed'],
                    file(params.modules_testdata_base_path + '/genomics/homo_sapiens/genome/genome.blacklist_intervals.bed', checkIfExists: true)
                ]
                input[4] = "deepvariant"
                """
            }
        }

        then {
            assertAll(
                { assert workflow.success },
                { assert snapshot(workflow.out).match()
                }
            )
        }
    }

    test("1 sample - no bed, fasta, fai, [], deepvariant -stub") {

        options "-stub"

        when {
            workflow {
                """
                input[0] = Channel.of([
                    [ id:'test', single_end:false, num_intervals:1 ], // meta map
                    file(params.modules_testdata_base_path + '/genomics/homo_sapiens/illumina/bam/test.paired_end.sorted.bam', checkIfExists: true),
                    file(params.modules_testdata_base_path + '/genomics/homo_sapiens/illumina/bam/test.paired_end.sorted.bam.bai', checkIfExists: true),
                    []
                ])
                input[1] = [
                    [ id:'genome'],
                    file(params.modules_testdata_base_path + '/genomics/homo_sapiens/genome/genome.fasta', checkIfExists: true)
                ]
                input[2] = [
                    [ id:'genome'],
                    file(params.modules_testdata_base_path + '/genomics/homo_sapiens/genome/genome.fasta.fai', checkIfExists: true)
                ]
                input[3] = [[],[]]
                input[4] = "deepvariant"
                """
            }
        }

        then {
            assertAll(
                { assert workflow.success },
                { assert snapshot(workflow.out).match()
                }
            )
        }

    }

    test("1 sample - 1 bed, fasta, fai, [], deepvariant -stub") {

        options "-stub"

        when {
            workflow {
                """
                input[0] = Channel.of([
                    [ id:'test', single_end:false, num_intervals:1 ], // meta map
                    file(params.modules_testdata_base_path + '/genomics/homo_sapiens/illumina/bam/test.paired_end.sorted.bam', checkIfExists: true),
                    file(params.modules_testdata_base_path + '/genomics/homo_sapiens/illumina/bam/test.paired_end.sorted.bam.bai', checkIfExists: true),
                    file(params.modules_testdata_base_path + '/genomics/homo_sapiens/genome/genome.bed', checkIfExists: true)
                ])
                input[1] = [
                    [ id:'genome'],
                    file(params.modules_testdata_base_path + '/genomics/homo_sapiens/genome/genome.fasta', checkIfExists: true)
                ]
                input[2] = [
                    [ id:'genome'],
                    file(params.modules_testdata_base_path + '/genomics/homo_sapiens/genome/genome.fasta.fai', checkIfExists: true)
                ]
                input[3] = [[],[]]
                input[4] = "deepvariant"
                """
            }
        }

        then {
            assertAll(
                { assert workflow.success },
                { assert snapshot(workflow.out).match()
                }
            )
        }

    }

    test("1 sample - 2 bed, fasta, fai, [], deepvariant -stub") {

        options "-stub"

        when {
            workflow {
                """
                input[0] = Channel.of(
                    [
                        [ id:'test', single_end:false, num_intervals:2 ], // meta map
                        file(params.modules_testdata_base_path + '/genomics/homo_sapiens/illumina/bam/test.paired_end.sorted.bam', checkIfExists: true),
                        file(params.modules_testdata_base_path + '/genomics/homo_sapiens/illumina/bam/test.paired_end.sorted.bam.bai', checkIfExists: true),
                        file(params.modules_testdata_base_path + '/genomics/homo_sapiens/genome/genome.bed', checkIfExists: true)
                    ],
                    [
                        [ id:'test', single_end:false, num_intervals:2 ], // meta map
                        file(params.modules_testdata_base_path + '/genomics/homo_sapiens/illumina/bam/test.paired_end.sorted.bam', checkIfExists: true),
                        file(params.modules_testdata_base_path + '/genomics/homo_sapiens/illumina/bam/test.paired_end.sorted.bam.bai', checkIfExists: true),
                        file(params.modules_testdata_base_path + '/genomics/homo_sapiens/genome/genome.multi_intervals.bed', checkIfExists: true)
                    ]
                )
                input[1] = [
                    [ id:'genome'],
                    file(params.modules_testdata_base_path + '/genomics/homo_sapiens/genome/genome.fasta', checkIfExists: true)
                ]
                input[2] = [
                    [ id:'genome'],
                    file(params.modules_testdata_base_path + '/genomics/homo_sapiens/genome/genome.fasta.fai', checkIfExists: true)
                ]
                input[3] = [[],[]]
                input[4] = "deepvariant"
                """
            }
        }

        then {
            assertAll(
                { assert workflow.success },
                { assert snapshot(workflow.out).match()
                }
            )
        }

    }

    test("2 samples - 2 bed, fasta, fai, [], deepvariant -stub") {

        options "-stub"

        when {
            workflow {
                """
                input[0] = Channel.of(
                    [
                        [ id:'test', single_end:false, num_intervals:2 ], // meta map
                        file(params.modules_testdata_base_path + '/genomics/homo_sapiens/illumina/bam/test.paired_end.sorted.bam', checkIfExists: true),
                        file(params.modules_testdata_base_path + '/genomics/homo_sapiens/illumina/bam/test.paired_end.sorted.bam.bai', checkIfExists: true),
                        file(params.modules_testdata_base_path + '/genomics/homo_sapiens/genome/genome.bed', checkIfExists: true)
                    ],
                    [
                        [ id:'test', single_end:false, num_intervals:2 ], // meta map
                        file(params.modules_testdata_base_path + '/genomics/homo_sapiens/illumina/bam/test.paired_end.sorted.bam', checkIfExists: true),
                        file(params.modules_testdata_base_path + '/genomics/homo_sapiens/illumina/bam/test.paired_end.sorted.bam.bai', checkIfExists: true),
                        file(params.modules_testdata_base_path + '/genomics/homo_sapiens/genome/genome.multi_intervals.bed', checkIfExists: true)
                    ],
                    [
                        [ id:'test2', single_end:false, num_intervals:2 ], // meta map
                        file(params.modules_testdata_base_path + '/genomics/homo_sapiens/illumina/bam/test.paired_end.sorted.bam', checkIfExists: true),
                        file(params.modules_testdata_base_path + '/genomics/homo_sapiens/illumina/bam/test.paired_end.sorted.bam.bai', checkIfExists: true),
                        file(params.modules_testdata_base_path + '/genomics/homo_sapiens/genome/genome.bed', checkIfExists: true)
                    ],
                    [
                        [ id:'test2', single_end:false, num_intervals:2 ], // meta map
                        file(params.modules_testdata_base_path + '/genomics/homo_sapiens/illumina/bam/test.paired_end.sorted.bam', checkIfExists: true),
                        file(params.modules_testdata_base_path + '/genomics/homo_sapiens/illumina/bam/test.paired_end.sorted.bam.bai', checkIfExists: true),
                        file(params.modules_testdata_base_path + '/genomics/homo_sapiens/genome/genome.multi_intervals.bed', checkIfExists: true)
                    ]
                )
                input[1] = [
                    [ id:'genome'],
                    file(params.modules_testdata_base_path + '/genomics/homo_sapiens/genome/genome.fasta', checkIfExists: true)
                ]
                input[2] = [
                    [ id:'genome'],
                    file(params.modules_testdata_base_path + '/genomics/homo_sapiens/genome/genome.fasta.fai', checkIfExists: true)
                ]
                input[3] = [[],[]]
                input[4] = "deepvariant"
                """
            }
        }

        then {
            assertAll(
                { assert workflow.success },
                { assert snapshot(workflow.out).match()
                }
            )
        }

    }

    test("2 samples - 2 bed, fasta, fai, par_bed, deepvariant -stub") {

        options "-stub"

        when {
            workflow {
                """
                input[0] = Channel.of(
                    [
                        [ id:'test', single_end:false, num_intervals:2 ], // meta map
                        file(params.modules_testdata_base_path + '/genomics/homo_sapiens/illumina/bam/test.paired_end.sorted.bam', checkIfExists: true),
                        file(params.modules_testdata_base_path + '/genomics/homo_sapiens/illumina/bam/test.paired_end.sorted.bam.bai', checkIfExists: true),
                        file(params.modules_testdata_base_path + '/genomics/homo_sapiens/genome/genome.bed', checkIfExists: true)
                    ],
                    [
                        [ id:'test', single_end:false, num_intervals:2 ], // meta map
                        file(params.modules_testdata_base_path + '/genomics/homo_sapiens/illumina/bam/test.paired_end.sorted.bam', checkIfExists: true),
                        file(params.modules_testdata_base_path + '/genomics/homo_sapiens/illumina/bam/test.paired_end.sorted.bam.bai', checkIfExists: true),
                        file(params.modules_testdata_base_path + '/genomics/homo_sapiens/genome/genome.multi_intervals.bed', checkIfExists: true)
                    ],
                    [
                        [ id:'test2', single_end:false, num_intervals:2 ], // meta map
                        file(params.modules_testdata_base_path + '/genomics/homo_sapiens/illumina/bam/test.paired_end.sorted.bam', checkIfExists: true),
                        file(params.modules_testdata_base_path + '/genomics/homo_sapiens/illumina/bam/test.paired_end.sorted.bam.bai', checkIfExists: true),
                        file(params.modules_testdata_base_path + '/genomics/homo_sapiens/genome/genome.bed', checkIfExists: true)
                    ],
                    [
                        [ id:'test2', single_end:false, num_intervals:2 ], // meta map
                        file(params.modules_testdata_base_path + '/genomics/homo_sapiens/illumina/bam/test.paired_end.sorted.bam', checkIfExists: true),
                        file(params.modules_testdata_base_path + '/genomics/homo_sapiens/illumina/bam/test.paired_end.sorted.bam.bai', checkIfExists: true),
                        file(params.modules_testdata_base_path + '/genomics/homo_sapiens/genome/genome.multi_intervals.bed', checkIfExists: true)
                    ]
                )
                input[1] = [
                    [ id:'genome'],
                    file(params.modules_testdata_base_path + '/genomics/homo_sapiens/genome/genome.fasta', checkIfExists: true)
                ]
                input[2] = [
                    [ id:'genome'],
                    file(params.modules_testdata_base_path + '/genomics/homo_sapiens/genome/genome.fasta.fai', checkIfExists: true)
                ]
                input[3] = [
                    [ id:'par_bed'],
                    file(params.modules_testdata_base_path + '/genomics/homo_sapiens/genome/genome.blacklist_intervals.bed', checkIfExists: true)
                ]
                input[4] = "deepvariant"
                """
            }
        }

        then {
            assertAll(
                { assert workflow.success },
                { assert snapshot(workflow.out).match()
                }
            )
        }

    }

}
