nextflow_workflow {

    name "Test Workflow ANNOTATE_CADD"
    script "../main.nf"
    config "./nextflow.config"
    workflow "ANNOTATE_CADD"

    setup {
        run("GUNZIP") {
            script "../../../../modules/nf-core/gunzip/main.nf"
            process {
                """
                input[0] = [
                    [ id:'test' ],
                    file(params.pipelines_testdata_base_path + 'reference/hg38.test.fa.gz', checkIfExists: true)
                ]
                """
            }

        }
        run("SAMTOOLS_FAIDX") {
            script "../../../../modules/nf-core/samtools/faidx/main.nf"
            process {
                """
                input[0] = GUNZIP.out.gunzip
                input[1] = [[],[]]
                input[2] = false
                """
            }
        }
        run("DEEPVARIANT_RUNDEEPVARIANT") {
            script "../../../../modules/nf-core/deepvariant/rundeepvariant/main.nf"
            process {
                """
                input[0] = [
                    [ id: 'test', family_id: 'test', sex: 1 ],
                    file(params.pipelines_testdata_base_path + 'testdata/HG002_PacBio_Revio.bam', checkIfExists: true),
                    file(params.pipelines_testdata_base_path + 'testdata/HG002_PacBio_Revio.bam.bai', checkIfExists: true),
                    file(params.pipelines_testdata_base_path + 'reference/test_data.bed', checkIfExists: true)
                ]
                input[1] = GUNZIP.out.gunzip
                input[2] = SAMTOOLS_FAIDX.out.fai
                input[3] = [[],[]]
                input[4] = [[],[]]
                """
            }
        }
    }

    test("1 sample - stub") {
        options "-stub"

        when {
            workflow {
                """
                input[0] = SAMTOOLS_FAIDX.out.fai
                input[1] = DEEPVARIANT_RUNDEEPVARIANT.out.vcf
                input[2] = DEEPVARIANT_RUNDEEPVARIANT.out.vcf_index
                input[3] = Channel.of([
                    [ id: 'test' ],
                    file("$projectDir/assets/cadd_to_vcf_header_-1.0-.txt", checkIfExists: true)
                ])
                input[4] = Channel.of([
                    [ id: 'test' ],
                    file("$projectDir/assets/", checkIfExists: true)
                ])
                input[5] = Channel.of([
                    [ id: 'test' ],
                    file("$projectDir/docs/", checkIfExists: true)
                ])
                """
            }
        }

        then {
            assertAll(
                { assert workflow.success },
                { assert snapshot(workflow.out).match() }
            )
        }
    }
}
